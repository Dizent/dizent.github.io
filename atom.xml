<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dizent</title>
  
  <subtitle>千头万绪君不知,来年柳绿故人迟.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zone.dizent.cn/"/>
  <updated>2021-06-12T15:59:19.741Z</updated>
  <id>http://zone.dizent.cn/</id>
  
  <author>
    <name>Dizent</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>狼人杀规则</title>
    <link href="http://zone.dizent.cn/2021/06/12/%E7%8B%BC%E4%BA%BA%E6%9D%80%E8%A7%84%E5%88%99/"/>
    <id>http://zone.dizent.cn/2021/06/12/%E7%8B%BC%E4%BA%BA%E6%9D%80%E8%A7%84%E5%88%99/</id>
    <published>2021-06-12T15:59:05.754Z</published>
    <updated>2021-06-12T15:59:19.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="狼人杀"><a href="#狼人杀" class="headerlink" title="狼人杀"></a>狼人杀</h2><h3 id="身份"><a href="#身份" class="headerlink" title="身份"></a>身份</h3><ul><li><code>神</code> 预言家：每天晚上查验一名玩家身份，法官给出好人或狼人手势</li><li><code>神</code> 女巫：有一瓶解药和一瓶毒药，一天晚上只能用一瓶，<ul><li>解药：在没有用解药的时候，法官会给出当晚狼人击杀对象的数字手势，用完解药便不给；使用解药时，女巫要给法官大拇指朝上的手势，表示要救起被狼人刀中的玩家</li><li>毒药：女巫给法官一个数字手势，表示要使用毒药，数字手势代表要毒走的玩家，如果对应玩家是猎人，则猎人技能不可发动</li></ul></li><li><code>神</code>猎人：每天晚上法官给出是否可以开枪的手势，只要没有被女巫毒中，则一直可以开枪，如果猎人被女巫毒中，则表示第二天猎人听到自己晚上死亡的时候，不可以选择发动技能</li><li><code>神</code>白痴：在白天投票出局的时候，必须翻牌自证身份，免疫投票出局一次，之后的游戏，不能投票，但是可以在白天继续发言</li><li><code>神</code>守卫：在晚上睁眼，给法官收拾，选择守卫一名玩家，守卫的玩家，被狼人刀中之后不死；<ul><li>当狼人刀中守卫守护的玩家，并且女巫选择使用解药救起玩家，同守同救同样会出局，且女巫失去解药</li></ul></li><li><code>神</code>骑士：在白天任意玩家发言时，翻牌选择另一名玩家进行决斗<ul><li>如果被决斗的玩家是狼人，则对应狼人出局，进入黑夜</li><li>如果被决斗的玩家是好人，则骑士出局，发言继续</li></ul></li><li><code>中立</code>混血儿：开局的时候睁眼，并选择一名玩家作为混血儿的偶像，混血儿只睁眼一晚，胜利条件和偶像相同，偶像是狼是民出局后，混血儿都不会变身份</li><li><code>狼</code>黑狼王：和狼人一起睁眼，参与刀人，不可自刀，当白天被投票出局的时候，可以选择发动技能（不翻牌），带走一名玩家（狼队猎人）ps：黑狼王被女巫毒中也不能发动技能，法官要在黑狼王选择发动技能的时候判断，是否可以发动</li><li><code>狼</code>白狼王：和狼人一起睁眼，参与刀人，不可自刀，白天任意一名玩家发言时，可以翻牌自爆，带走一名玩家，和该玩家同归于尽</li></ul><h3 id="晚上睁眼顺序"><a href="#晚上睁眼顺序" class="headerlink" title="晚上睁眼顺序"></a>晚上睁眼顺序</h3><p>以下身份，没有的话则跳过：</p><blockquote><ol><li>守卫（守卫请睁眼，选择守护的玩家【玩家摇头或者在身前比❎表示当晚不守】）</li><li>狼人（狼人请睁眼，狼王请举手示意，选择你们的击杀目标）</li><li>女巫（女巫请睁眼，昨晚他死了【有解药时给出数字手势，没有解药不给手势，但是要说这句话】，是否使用解药，是否使用毒药）</li><li>预言家（预言家请睁眼，选择一名玩家查验身份，他的身份是【好人大拇指朝上手势，狼人狼爪或大拇指朝下】）</li><li>猎人（猎人请睁眼，昨晚你的开枪状态是【给出开枪状态手势，没有被毒药毒中，都是可以开枪的】）</li><li>骑士（骑士请睁眼，骑士看向法官）</li><li>白痴（白痴请睁眼，白痴请看向法官）</li><li>混血儿（混血儿请睁眼，请选择你的偶像，记录玩家给的偶像数字）</li></ol></blockquote><p>在需要和玩家互动手势的阶段，最好可以比出玩家的手势，说<code>法官看到的手势是【比出手势】</code>来二次确认</p><h3 id="白天顺序"><a href="#白天顺序" class="headerlink" title="白天顺序"></a>白天顺序</h3><ol><li>第一晚，所有玩家轮流睁眼，使用技能</li><li>天亮睁眼，开始【警长竞选】，参与警长竞选的人亮红灯</li><li>开始警长竞选发言，所有玩家发言结束，开启退水自爆环节；</li><li>警长投票阶段，选出的警长，在投票阶段拥有1.5票权</li><li>宣布第一晚死亡情况后，由警长选择发言顺序</li><li>所有人发言完毕，警长归票，开启放逐投票，被放逐的玩家发表遗言，第一天白天结束</li><li>第二晚，所有玩家睁眼，使用技能</li><li>第二天睁眼，宣布死亡情况，警长选择发言顺序，后面的白天都只有放逐投票</li></ol><h3 id="特殊规则"><a href="#特殊规则" class="headerlink" title="特殊规则"></a>特殊规则</h3><ol><li>狼人自爆：<ol><li>狼人在白天发言阶段可以自爆【自杀】，使游戏直接进入黑夜，当天白天没有投票阶段，如果还在警长发言阶段，则当天白天没有警长投票阶段</li></ol></li><li>双爆吞警徽：<ol><li>在第一天白天警徽尚未投票前，单个狼人选择自爆，进入第二晚黑夜</li><li>第二晚黑夜结束之后，如果剩余狼人玩家继续选择自爆，则进入第三晚黑夜</li><li>两个狼人在第一第二天连续自爆，当局游戏没有警徽</li></ol></li><li>警徽流失：<ol><li>情况一：所有玩家都上警，所有玩家都亮红灯</li><li>情况二：狼人双爆吞警徽</li><li>情况三：拥有警徽的人出局之后，选择不移交警徽给其他玩家，撕掉警徽</li></ol></li><li>狼人自爆指刀：<ol><li>狼人在白天自爆，直接进入黑夜之后，自爆狼人可以继续参与自爆之后第一晚的刀人行动</li><li>狼人自爆之后，发言顺序改为狼人第一个睁眼，其他玩家睁眼顺序不变</li></ol></li><li>狼人自爆吞毒：<ol><li>如果 <code>3</code>号玩家是狼人，在前一天晚上被女巫毒走，在天亮之后，法官宣布死亡情况之前</li><li>可以抢在法官宣布情况之前自爆，直接进入黑夜，并且参与当晚指刀</li></ol></li><li>骑士技能吞刀：<ol><li>如果<code>3</code>号玩家是骑士，第一天晚上被狼人刀中，在天亮之后，警长竞选发言阶段，法官宣布死亡情况之前</li><li>可以抢在法官宣布情况之前发动技能，并进行技能判定</li></ol></li></ol><h3 id="固定配置"><a href="#固定配置" class="headerlink" title="固定配置"></a>固定配置</h3><ol><li><p>12人局【预女猎白】</p><ul><li><code>神</code>预言家+女巫+猎人+白痴</li><li><code>狼</code>4 <em> 小狼  + <code>民</code> 4 </em>平民</li></ul></li><li><p>12人局【预女守 骑+白狼王】</p><ul><li><code>神</code>预言家+女巫+守卫+骑士</li><li><code>狼</code>3 <em> 小狼+1 </em> 白狼王  + <code>民</code> 4 *平民</li></ul></li><li><p>12人局【预女守 猎+黑狼王】</p><ul><li><code>神</code>预言家+女巫+守卫+猎人</li><li><code>狼</code>3 <em> 小狼+1 </em> 黑狼王  + <code>民</code> 4 *平民</li></ul><blockquote><ol><li>如果13人则加入<code>混血儿</code></li><li>如果11人则<code>预女猎白+4狼+3民</code>，白痴为<code>神民双边</code>，狼人必须击杀白痴才能获胜</li></ol></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>部署 Hexo</title>
    <link href="http://zone.dizent.cn/2020/05/29/%E9%83%A8%E7%BD%B2%20Hexo/"/>
    <id>http://zone.dizent.cn/2020/05/29/%E9%83%A8%E7%BD%B2%20Hexo/</id>
    <published>2020-05-29T15:09:04.911Z</published>
    <updated>2020-05-29T15:09:04.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="部署-Hexo"><a href="#部署-Hexo" class="headerlink" title="部署 Hexo"></a>部署 Hexo</h1><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="#准备工作"></a>#准备工作</h2><p>如果没有账号，请点此前往 GitHub 注册一个 GitHub 账号。</p><p>新建一个公开仓库，仓库名格式为 your_username.github.io 例如你的 GitHub 用户名是 easyhexo ，那么你的仓库地址名称就应该是 easyhexo.github.io</p><p>创建完成后记下该仓库的 HTTPS/SSH 地址，一般格式为 <a href="https://github.com/your_username/your_reponame.git" target="_blank" rel="noopener">https://github.com/your_username/your_reponame.git</a> 在下一步会用到。</p><h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><pre><code>$ npm install hexo-deployer-git --save$ npm install hexo-server --save</code></pre><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。</p><pre><code>$ git config --global user.name &quot;Your_user_name&quot;$ git config --global user.email Your_email@example.com</code></pre><blockquote><p>提醒</p><p>每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的～</p></blockquote><h3 id="配置站点-config-yml-文件"><a href="#配置站点-config-yml-文件" class="headerlink" title="配置站点 _config.yml 文件"></a>配置站点 _config.yml 文件</h3><pre><code>deploy:  type: git # 类型填git  repo: &lt;repository url&gt; # 你的Github仓库地址  branch: master # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。  message: # 提交信息可以自定义，不填的则默认为提交时间</code></pre><h3 id="发布到-GitHub"><a href="#发布到-GitHub" class="headerlink" title="发布到 GitHub"></a>发布到 GitHub</h3><p>在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。</p><pre><code>$ hexo clean &amp;&amp; hexo d -g</code></pre><blockquote><p>提醒</p><p>如果是第一次使用，会弹出一个登录框，需要登录你的 GitHub 账号。</p></blockquote><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>如果你拥有个人域名，请用 A 记录解析到以下 IP 中的任意一个。如果使用 CNAME 请解析到你的 GitHub 仓库名称。</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p><strong>参考表格</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析路线</th><th>记录值</th><th>MAX 优先级</th><th>TTL（秒）</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>默认</td><td>185.199.110.153</td><td>-</td><td>600</td></tr><tr><td>CNAME</td><td>@</td><td>默认</td><td>GitHub博客仓库名称</td><td>-</td><td>600</td></tr></tbody></table><p>打开仓库设置，找到 GitHub Pages 项目，修改 Custom domain 选项的值为你的自定义域名（不带 http 等前缀）</p><p>勾选 Custom domain 选项下的 Enforce HTTPS 选项，强制开启 Https 。如果遇到 Enforce HTTPS 选项无法打开，可以稍等一会儿再尝试。</p><blockquote><p>提醒</p><p>同时需要在本地的 source 目录新建一个 CNAME 文件，内容为你的自定义域名（不带 http 等前缀）。否则无法使用自定义域名功能（ hexo d 生成的文件没有 CNAME 文件，导致仓库的自定域名设置失效）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flink入门-简介</title>
    <link href="http://zone.dizent.cn/2020/05/27/Flink%E5%85%A5%E9%97%A8-%E7%AE%80%E4%BB%8B/"/>
    <id>http://zone.dizent.cn/2020/05/27/Flink%E5%85%A5%E9%97%A8-%E7%AE%80%E4%BB%8B/</id>
    <published>2020-05-27T01:07:00.000Z</published>
    <updated>2020-05-27T05:51:18.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>前言</p></blockquote><p>Flink 是一种流式计算框架，为什么我会接触到 Flink 呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Flink" scheme="http://zone.dizent.cn/categories/Flink/"/>
    
    
      <category term="bigdata" scheme="http://zone.dizent.cn/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>免费影视站点分享</title>
    <link href="http://zone.dizent.cn/2020/03/12/%E5%85%8D%E8%B4%B9%E5%BD%B1%E8%A7%86%E7%AB%99%E7%82%B9%E5%88%86%E4%BA%AB/"/>
    <id>http://zone.dizent.cn/2020/03/12/%E5%85%8D%E8%B4%B9%E5%BD%B1%E8%A7%86%E7%AB%99%E7%82%B9%E5%88%86%E4%BA%AB/</id>
    <published>2020-03-12T01:01:00.000Z</published>
    <updated>2020-11-13T01:35:38.174Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好，这里需要密码。" /><label>您好，这里需要密码。</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="0cc08c00c3f93c16e773d0e29df7e81a2213c23ac76901ac7d95264c90b22e9d">001ba783111e645dd229edf0d43eeb8836ae72f17331cc3202c2cca9dfe3881534dfd45ce1b8db18c9698b11222ab058568d9dac072298521c04dfa1844bfcd01a9cff9ddb9cadb2d25678e4a109fb4eb65c237aa6fc41836a01ebbe178bedf506fc3dbeb16b02dfeb249168a504c874d98bae019e0aacf0e284750b0845ea4901cf4f4848e3f8bf95e0098b5340e649020132e05a601b6035343e622c0a6ecebf411416f558454e0446db2de73058876c74a66f240aa699dd34df43853072cb7a0a733b19e7f30045f030591c78949dbf7d8e87b574980b5c83e556f2d2d75f62a2d841c904a62447fb904f3004d3dd37edccc4ac1531bfc3ac15aeef468e2adfd88fafd81b9ff1cdc395a55eda329c693e850b718a6383bd624c0aa3a913590a23209fc99f590065c186aed5989ab6cb943a28456f7ce0d5070e3fd8aefaa902688d3e1f54684bf73218e276e9d86eccd05c36813f63aa2ee8a747bab7949ab699ee646e32d6a2a0d2dea6b0df7d28b8e157f5ef3d44814abefa9d5bd358b804f23485489fdfa5df71c65d2034938bacd3ee20e86d485618ceffa73d5609b428232952a6c430773310703397dbe53d254cae1b1db2e25e83eb5070b6c720ae729e71de45fea2f74d7733b844a37dfcc90b42c2aa7920a42ed19deed97559209b2dbf4e2dabb658c5218909d0fc7ece033603a68951362d665f5ec4462a3730bbe71e4e39c53b806d5d908c3d084ad3d3ddd81f44b86edc20a2066fc2751ff81f615332ddac946586273d3c885579b19d4a29d3977646ec144aeb31db9fcdafdb457f46ef1d75d65e8da9cdb7a6416070f9e23437bef0f0271fb5766ac587137e1e5355c37be892b54f9f232dc437a9ab1528fc28db416ba89076aabc137dbc48221a3dd6f5aaa834543b3c529e95e1e24c7ee70203aeadf17778897464a7ec75bbf68b6b34221b6d9659bc00f09f2720897616341e83d83c5a2594c578fbd70ff7b32ec45b3ef09c488d025ce8690baf96212b87fe5364f5479fbc5da00fb49001da50a686e66e49274aabeb8d55197c4f45e7d9fc91ca8013ad9b59f9572c8cf9ecfda3ca754053183c95bc54a66a00646c3f9cd9233ad33e287691fe40df78a12ead931c80a1e723cc56fe226005eff843fd72eee753437f07f30cd066d9e6a0de5d6918d5b8ec294d6b78112c6b36e27c7f132103ff36888cbe1b9d73bbeb1444fe0cab24e6ae7eeba6d2009a9846550e7fe9d09ae07aedf02058163897a09ec7ae65c93e47f055b7c9994fe4e62e4ff3c8a7c524b053cef3fb1ab39820126d489ddf2d14aa11b22b2e5e908e6a65e60d318eace1b6723153ac54fdcc27c49eeda87ea1b246ee10e6cab737bddbbb9809e8cfbc1d55978ca8ebb1adf8e03d9981feb18d86a2770ce0aa42a0580ff0cf4f3f27ad0f8e9bc4acefe92999b803eefaa9efc328fa4e264ed1dcc839c9d892f6c1ab07691ce63c45edf80451643d768c7e7740ca84078e9a59bfbfd80e005831b24a54f236c29b60d2a896246c836d4a3e134a682fd8bdf8cfb002d0d4a8b17c82e9a9d698458289af655828653dbc8f1effd8dbe9a16706d32297999b57011441acc76c30d99f31d2fd7e5249a54d19d17f5916b0a44aa2a70a263093f1acff03377a1050b19b1f3c3b6557ce436cc1773442f2ec60ed5fc0ccc46911e9a33f51579b1fc07baf9e808c0e347ec75ad5fb7e2ce09c7f250fff2c40c6a39c9253f838a0441a6b0329ef14f4bcad637af11999be591d5af84b22e4cf4d2221a1be26dbba0ce22f9686960a6534c8d309332bc87e9507c198935a33a9d7e59694c06024cbe969df09549afd0eb82378b711c288da03698979ce37fee4fd5133379b0b8bc7d7c85ab2a130e2d9c614c6a4a5edf081d440f0067c3c576630494b636304aec65b9cb319dd34c16dce44c94c854479feb70534aef95636113c96296689649f5ffc444e3bbce7a7c4dbcd811405023a2657165857f41acb799b11a7fc9985d01ceebe5bb151c108c3c2ddfe91a0a7de74282926a67f9c44cd73ebec92a14aca6bf986a1fff4d07114cc88e3f8337e7f9e6c8a3c02a58e22027b122b618db3f141a14e77b8f1222438244197300ffa205d7c94d13f1e62a42df5ce60eacec3aa6d7fb37e1d47b62f69214d1a23bb03880682a69656b2f9d71506ef75302fb1ddc145e6a3affed221f7f89353379d9c78722cd6766988cb90e1263da0402e91f942759c24b56a0c4cc34ff9346eed60d0a0dee8bfeca2e89023fd689ebb5f432b5bc03e2e4546f35ff7eb1530add2947d9ee16df3b5383f69414dd3ea2ac5d0e2babcb41bc8d054a32b8349e8488bc4ca97601890a8bacdfc065f4e9fe3600e6719d33181e619d4fbb69c01d6446167fa1bb46bcf5dd354c73333457e29d165c9a829b090049133952ebae9ce5279ee3a8a04a0261be1a6be3ab8ad7f0c8c1906de99a3b3b80ab7f99bcd7a2a2733084fc47ddf2e4e8bbe298cbaae8e039dd62e9212984fb099e44f287fefec4f695c5d0306d55c65b2f8290bbd87259014ff9e86238ca6caac18f18f8d7134a444453a3427430b32351c8cc9caa9b2caa7e5f8e1bc6a9cf51c9b82c449d8b81e6179767480e3f159ad365280acc739e8dbb9654989f4f5e78be570767294dcbc8c6c6013350a2fab057ea814ea2f40ef857df1a49eb67b0dcf4a07d60ccab8cab4e3d157f475140e02504e61be67a0d08ec3e5b335d69a5b7b8c362fad4639e4b9af60f02e207ed2661529a5413a06873b7d2bbcdf391bc93598ef638aa453d3bde86792dacf9090f200c895ee53dd3bfea74ae359dffa052cf896328ca91ac4fe69433f163f1af847538e1bd9ac543a12ce3af1b8ccf68cf4e94063c877c7b88938b529e772e4b20191e95311f900c1fe0d94f42f7461751a701a8dd817d65050415ad61d57755034354ed7917cf0e2111af2cddd41ad267646b116ea9d64b74b1f19459b008a339a40bbe7e8eb440487f9cad9660be4e33ea7996416ffb9719efea9488130f3be4e03dec86ef910f5bbb62e2ef2adb15ea1167af219b1083d48de5f1936b430ef2ba2be9c2a20ce419bb654ee7344601afb5eb142c6f826cb63feb10b458d9b0c4557cdce1257867e5fbb6a9911a9ed51f3a6ee6c523cd016614d04fdca76dcb0355495818ad6966d9b3ac82cc7f36901f09fa605743465b7dd15237661d1128ed27cb999fc1825c050acf407b2c6288e14f32d52fc4464a9920ebd176dbcedfeb53f7cb83fc4d958560b301c4779b7a2ee84d70a4b503180a96bc8cd8d23ab743ec3bc966af63ec2f661b1654dd8b18501f77abe97927b8ab19d46c941da54e22b43b847738fc87426a13c6eeaa7abfeb008491a12c1dc80ce7dfbb157387078db594271a5eac721cb9c664ad047b940c84743a79a28200f0df7c2d7e69ce4a63890214791c6417878cc8b95839edd6f9ed65babe0208025950f6a75138651401b6ce3b705a31c6fa48288db73cd1aa135bbe37897a5856fccffe88c0056a47345d261e46390abed038b0d613528973362cfb44db321d7e8c2315a31a4d39bf388d8aa30129cbd22ff83c121ac800ad181382d9e33f2f9564cfcf2f1151f02658524d9f3e3a0ee3d96203ded1a2330213cc0ac15286df5a9b2686f0b923e7515a9d18c5e613906a74fff1689c852c2684c93f68eebe97c7eeb8ce8f47957a5f95da493f6c86a05e85ea54ec04595187497165d31c874c124354d32858f6a49561c1ef1aa4da0e2791d525cf5ba82cf2ccf6cfa62855017f01a351faae1100ba77022026f1a6ef6b37eecf9a35e8304bcda685aa957416f5c54a54219c25fa3833657a220a7f846b2277813a942f0ca0febfa2406a9b8b6ca2cd5f17f21aa64df1785a1da4d21749e34b99002c356dcd68ce4a2a0c360</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这里有东西被加密了，需要输入密码查看哦。
    
    </summary>
    
    
    
      <category term="薅羊毛" scheme="http://zone.dizent.cn/tags/%E8%96%85%E7%BE%8A%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>使用coding持续集成部署springboot项目到服务器</title>
    <link href="http://zone.dizent.cn/2020/02/21/%E4%BD%BF%E7%94%A8coding%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://zone.dizent.cn/2020/02/21/%E4%BD%BF%E7%94%A8coding%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-02-21T06:01:00.000Z</published>
    <updated>2020-06-11T09:04:45.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="准备条件："><a href="#准备条件：" class="headerlink" title="准备条件："></a>准备条件：</h2><ol><li>本地可运行的springboot项目，本文以Maven项目为例，构建打包均使用Maven命令</li><li>拥有服务器的私钥</li><li>拥有push权限的coding账号和本地可以成功push代码到coding</li><li>能理解基础的git、mvn、shell脚本命令</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="将代码推送到coding仓库"><a href="#将代码推送到coding仓库" class="headerlink" title="将代码推送到coding仓库"></a>将代码推送到coding仓库</h3><ol><li><p>新建一个coding仓库，项目模板选择<code>DevOps</code></p></li><li><p>项目名称自选，例如“范例”，其他均为默认，Git仓库（下方多选框不选）</p></li><li><p>进入项目<code>代码仓库</code>，复制git地址。<code>https://e.coding.net/dizent/fanli.git</code></p></li><li><p>进入本地项目目录，使用命令行将代码推送至仓库。</p><pre><code class="shell">cd 项目目录git initgit remote add origin https://e.coding.net/dizent/fanli.git #替换为你的仓库地址git add .git commit -m &quot;项目初始化&quot;git push origin master</code></pre></li><li><p>查看仓库中是否已有代码，即操作成功<br><img src="https://imgkr.cn-bj.ufileos.com/3815a1be-be89-4c67-b0c1-20f8e2bad3f8.png" alt="image-20200221111026550"></p></li></ol><h3 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h3><h4 id="新的构建计划"><a href="#新的构建计划" class="headerlink" title="新的构建计划"></a>新的构建计划</h4><ol><li>选择项目左侧菜单栏<code>构建与部署</code> –&gt;<code>构建</code></li><li>在内容区域选择<code>新建构建配置</code></li><li>输入<code>计划名称</code>，代码源选择<code>coding</code>、仓库选需要构建的仓库</li><li>配置来源<code>使用静态配置的JenkinsFile</code>–&gt;<code>并行过程模板</code></li><li>勾选<code>前往流程配置</code>，点击<code>保存修改</code><h4 id="流程配置"><a href="#流程配置" class="headerlink" title="流程配置"></a>流程配置</h4></li><li>选择<code>文本编辑器</code></li><li>配置解读</li></ol><blockquote><p>配置采用pipeline</p><p>默认环境下需要添加<code>agent any</code> ，表示“在 CODING 提供的云主机上执行 Pipeline 或 stage”</p><p>构建步骤将在<code>stages</code>下分布进行，每个子<code>stage</code>都代表一个阶段</p></blockquote><h4 id="阶段配置"><a href="#阶段配置" class="headerlink" title="阶段配置"></a>阶段配置</h4><ul><li><strong>检出</strong>：</li></ul><pre><code class="shell">  stage(&#39;检出&#39;) {        steps {          checkout([$class: &#39;GitSCM&#39;, branches: [[name: env.GIT_BUILD_REF]],                   userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])        }      }</code></pre><blockquote><p>在仓库检出，此阶段配置无需改动，都默认为上一步构建计划的参数</p></blockquote><ul><li><strong>构建</strong></li></ul><pre><code class="json">  stage(&#39;构建&#39;) {        steps {          echo &#39;构建中...&#39;          sh &#39;java -version&#39;          sh &#39;mvn package&#39;          echo &#39;构建完成.&#39;          archiveArtifacts(artifacts: &#39;**/target/*.jar&#39;, fingerprint: true)        }      }</code></pre><blockquote><ol><li>echo为输出信息，不作其他解释</li><li>检查Java版本</li><li>Maven打包，打包在项目路径的<code>../target/*.jar</code></li><li>收集打包后的文件</li></ol></blockquote><ul><li><strong>测试</strong></li></ul><pre><code class="json">  stage(&#39;测试&#39;) {        steps {          echo &#39;单元测试中...&#39;          sh &#39;mvn test&#39;          echo &#39;单元测试完成.&#39;        }      }</code></pre><blockquote><p>执行Maven测试，测试test包下的代码</p></blockquote><ul><li><strong>部署</strong></li></ul><pre><code class="json">  stage(&#39;部署&#39;) {        steps {          echo &#39;部署中...&#39;          script {            def remote = [:]            remote.name = &#39;web-server&#39;            remote.allowAnyHosts = true            remote.host = &#39;服务器ip地址&#39;            remote.user = &#39;服务器用户名&#39;            // 需要先创建一对 SSH 密钥，把私钥放在 CODING 凭据管理，把公钥放在服务器的 `.ssh/authorized_keys`，实现免密码登录            withCredentials([sshUserPrivateKey(credentialsId: &quot;057*****-****-****-****-*******16f0a&quot;, keyFileVariable: &#39;id_rsa&#39;)]) {              remote.identityFile = id_rsa              // SSH 上传文件到远端服务器 “fanli-0.0.1-SNAPSHOT.jar”是生成的jar文件，into后是服务器端的目录              sshPut remote: remote, from: &#39;target/fanli-0.0.1-SNAPSHOT.jar&#39;, into: &#39;/usr/local/java&#39;              // 重启 服务器。在服务器端编写“deploy.sh”脚本进行项目启动控制              sshCommand remote: remote, sudo: true, command: &quot;sh /usr/local/java/deploy.sh restart&quot;            }            echo &#39;部署完成&#39;          }</code></pre><blockquote><ol><li>在script中编写提交到服务器的脚本</li><li>配置服务器的ssh密钥，并导入coding凭据。相关操作见<a href="https://help.coding.net/docs/devops/ci/credential.html" target="_blank" rel="noopener">coding使用凭证进行认证</a></li><li>上传文件到服务器</li><li>运行服务器端的脚本<code>deploy.sh</code></li><li><code>deploy.sh</code>脚本内容如下</li></ol><pre><code class="shell">#!/bin/sh## java 环境export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64## jre环境export JRE_HOME=$JAVA_HOME/jre## jar包推送路径export RUN_PATH=/usr/local/java## jar包名字API_NAME=fanli-0.0.1-SNAPSHOTJAR_NAME=$API_NAME\.jar#PID  代表是PID文件PID=$RUN_PATH/$API_NAME\.pid#使用说明，用来提示输入参数usage() {    echo &quot;Usage: sh 执行脚本.sh [start|stop|restart|status]&quot;    exit 1}#检查程序是否在运行is_exist(){  pid=`ps -ef|grep $JAR_NAME|grep -v grep|awk &#39;{print $2}&#39; `  #如果不存在返回1，存在返回0       if [ -z &quot;${pid}&quot; ]; then   return 1  else    return 0  fi}#启动方法start(){  is_exist  if [ $? -eq &quot;0&quot; ]; then     echo &quot;&gt;&gt;&gt; ${JAR_NAME} is already running PID=${pid} &lt;&lt;&lt;&quot;   else     nohup $JRE_HOME/bin/java -Xms256m -Xmx512m -jar $RUN_PATH/$JAR_NAME &gt; $RUN_PATH/fanli.out &amp;    echo $! &gt; $PID    echo &quot;&gt;&gt;&gt; start $JAR_NAME successed PID=$! &lt;&lt;&lt;&quot;    fi  }#停止方法stop(){  #is_exist  pidf=$(cat $PID)  #echo &quot;$pidf&quot;    echo &quot;&gt;&gt;&gt; api PID = $pidf begin kill $pidf &lt;&lt;&lt;&quot;  kill $pidf  rm -rf $PID  sleep 2  is_exist  if [ $? -eq &quot;0&quot; ]; then     echo &quot;&gt;&gt;&gt; api 2 PID = $pid begin kill -9 $pid  &lt;&lt;&lt;&quot;    kill -9  $pid    sleep 2    echo &quot;&gt;&gt;&gt; $JAR_NAME process stopped &lt;&lt;&lt;&quot;    else    echo &quot;&gt;&gt;&gt; ${JAR_NAME} is not running &lt;&lt;&lt;&quot;  fi  }#输出运行状态status(){  is_exist  if [ $? -eq &quot;0&quot; ]; then    echo &quot;&gt;&gt;&gt; ${JAR_NAME} is running PID is ${pid} &lt;&lt;&lt;&quot;  else    echo &quot;&gt;&gt;&gt; ${JAR_NAME} is not running &lt;&lt;&lt;&quot;  fi}#重启restart(){  stop  start}#根据输入参数，选择执行对应方法，不输入则执行使用说明case &quot;$1&quot; in  &quot;start&quot;)    start    ;;  &quot;stop&quot;)    stop    ;;  &quot;status&quot;)    status    ;;  &quot;restart&quot;)    restart    ;;  *)    usage    ;;esacexit 0</code></pre></blockquote><ul><li>触发规则<ul><li>选择自己需要的出发规则：例如，代码更新时执行，当执行<code>git push</code>之后，构建进行将执行</li></ul></li><li>变量与缓存<ul><li>可以将上方用到的变量使用变量配置，即可多项目使用</li><li>缓存目录：<code>项目目录</code> <code>Maven</code>打开</li></ul></li><li>通知提醒<ul><li>选择在构建时开启邮件提醒，并选择成员</li></ul></li></ul><h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><p>所有配置完成之后，即可点击<code>开始构建</code> ，可以查看构建进度。</p><p><img src="https://imgkr.cn-bj.ufileos.com/48cd2c14-5784-49cf-bdb5-7b819a3c41b3.png" alt="image-20200221125446930"></p><blockquote><p>参考文章：</p><ol><li><a href="https://help.coding.net/docs/devops/ci/deployment.html#%E9%83%A8%E7%BD%B2%E5%88%B0-Linux-Web-%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">coding部署到-Linux-Web-服务器</a></li><li><a href="https://help.coding.net/docs/devops/ci/credential.html" target="_blank" rel="noopener">coding在持续集成中使用凭据</a></li><li><a href="https://blog.csdn.net/u012278016/article/details/88575010" target="_blank" rel="noopener">Linux 运行jar包命令</a></li><li><a href="https://www.cnblogs.com/gyjx2016/p/8462929.html" target="_blank" rel="noopener">【springboot】之利用shell脚本优雅启动，关闭springboot服务</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://zone.dizent.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hadoop、hbase、zk伪集群服务单独启动命令</title>
    <link href="http://zone.dizent.cn/2020/02/19/hadoop%E3%80%81hbase%E3%80%81zk%E4%BC%AA%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%8D%95%E7%8B%AC%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://zone.dizent.cn/2020/02/19/hadoop%E3%80%81hbase%E3%80%81zk%E4%BC%AA%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%8D%95%E7%8B%AC%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-19T01:58:15.313Z</published>
    <updated>2020-05-09T01:46:44.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><table><thead><tr><th style="text-align:center">服务名</th><th>重启命令</th><th>对应服务</th></tr></thead><tbody><tr><td style="text-align:center">SecondaryNameNode</td><td>sh /opt/hadoop/sbin/start-dfs.sh</td><td>hadoop</td></tr><tr><td style="text-align:center">ResourceManager</td><td>sh /opt/hadoop/sbin/start-yarn.sh</td><td>hadoop</td></tr><tr><td style="text-align:center">NameNode</td><td>sh /opt/hadoop/sbin/start-dfs.sh</td><td>hadoop</td></tr><tr><td style="text-align:center">HRegionServer</td><td>sh /opt/hbase/bin/hbase-daemon.sh start regionserver</td><td>hbase</td></tr><tr><td style="text-align:center">HMaster</td><td>sh /opt/hbase/bin/hbase-daemon.sh start master</td><td>hbase</td></tr><tr><td style="text-align:center">QuorumPeerMain</td><td></td><td>zookeeper</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据" scheme="http://zone.dizent.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="bigdata" scheme="http://zone.dizent.cn/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>简单实现内网穿透</title>
    <link href="http://zone.dizent.cn/2019/12/16/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://zone.dizent.cn/2019/12/16/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2019-12-16T01:15:00.000Z</published>
    <updated>2020-05-09T01:46:44.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="本地实现内网穿透"><a href="#本地实现内网穿透" class="headerlink" title="本地实现内网穿透"></a>本地实现内网穿透</h1><blockquote><ul><li>工具：ngrok</li><li>环境：Mac OS 10.15</li><li>其他工具：nginx</li></ul></blockquote><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><ol><li>使用homebrew安装nginx</li></ol><pre><code class="shell">$ brew install nginx</code></pre><blockquote><p>通过homebrew安装的工具，会保存在<code>/usr/local/etc</code>目录下</p></blockquote><ol start="2"><li>启动nginx</li></ol><pre><code class="shell">$ nginx</code></pre><ol start="3"><li>打开浏览器，输入<code>http://localhost:8080</code>,看到以下界面，表示安装成功。</li></ol><p><img src="https://imgkr.cn-bj.ufileos.com/5554a05c-5260-482b-ada1-915972806a2b.png" alt="nginx"></p><ol start="4"><li>修改nginx配置</li></ol><ul><li>进入nginx目录：</li></ul><pre><code class="shell">$ cd /usr/local/etc/nginx$ vim nginx.conf</code></pre><ul><li>修改nginx.conf文件中的下面部分</li></ul><pre><code class="json">server {    #修改端口号        listen       80;        server_name  localhost;        location / {            #修改根目录            root   /Users/dizent/Documents/themes/Site/Category/;            index  index.html index.htm;        }        ……</code></pre><blockquote><p>我在<code>Users/dizent/Documents/themes/Site/Category</code>目录下放置了一些静态页面，以便调试。</p></blockquote><p><img src="https://imgkr.cn-bj.ufileos.com/ef6911e0-1c2b-4778-93e8-8f087226147e.png" alt="image"></p><ul><li>保存后重新启动</li></ul><pre><code class="shell">$ nginx -s reload</code></pre><ul><li>浏览器打开页面可以看到</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/ea7db8ef-5beb-4fa9-b047-d5bdc0aa9016.png" alt="页面展示"></p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><blockquote><p>经过上一章的操作，在本地已经可以通过浏览器访问该文件夹下的文件，接下来我们就要操作内网穿透，使用户可以在所有地方都可以访问该网页。</p></blockquote><ol><li>安装ngrok</li></ol><ul><li>进入ngrok官网下载安装包：<a href="https://ngrok.com/download" target="_blank" rel="noopener">https://ngrok.com/download</a></li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/cfb139f5-6c6b-4bb5-a6bb-9a0c52c48abd.png" alt="下载页面"></p><ol start="2"><li>下载之后，打开下载目录，并解压</li></ol><pre><code class="shell">$ unzip /ngrok.zip</code></pre><ol start="3"><li>获取授权</li></ol><ul><li>注册登录ngrok账号</li><li>进入：<a href="https://dashboard.ngrok.com/auth" target="_blank" rel="noopener">https://dashboard.ngrok.com/auth</a></li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/5477076e-f0b0-4df9-b3c1-8a72eccc1f26.png" alt="复制授权码"></p><ul><li>复制授权码，在终端输入命令：<br><code>`</code>shell<br>$ cd [ngrok目录]</li></ul><p>$ ./ngrok authtoken [授权码]</p><pre><code>4. 开启内网穿透```shell$ ./ngrok http 80ngrok by @inconshreveable                                                                                                                                               (Ctrl+C to quit)Session Status                onlineAccount                       Dizent (Plan: Free)Version                       2.3.34Region                        United States (us)Web Interface                 http://127.0.0.1:4040Forwarding                    http://13e89141.ngrok.io -&gt; http://localhost:80Forwarding                    https://13e89141.ngrok.io -&gt; http://localhost:80Connections                   ttl     opn     rt1     rt5     p50     p90                              0       0       0.00    0.00    0.00    0.00</code></pre><blockquote><p>出现以上代码时表明启动成功。</p></blockquote><ol start="5"><li>在任意联网的设备输入上述地址：<a href="http://13e89141.ngrok.io" target="_blank" rel="noopener">http://13e89141.ngrok.io</a></li></ol><p><img src="https://imgkr.cn-bj.ufileos.com/37fff383-e3c0-4044-83a2-5e0c66d0a433.png" alt="电脑展示效果"></p><p><img src="https://imgkr.cn-bj.ufileos.com/24e766f9-e9fc-4da6-b57d-f4d212759b95.png" alt="手机展示效果"></p><ol start="6"><li>使用内网穿透分享文件</li></ol><ul><li>在刚才放置网站的文件夹下，访问任意想分享的文件，例如：</li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/f7a6d926-fa69-479e-9705-835f8a9be6c5.png" alt="文件"></p><ul><li><p>我在根目录下新建了一个<code>/images</code>文件夹，并放置了一张图片，命名为<code>二维码.jpg</code></p></li><li><p>在浏览器输入<code>http://13e89141.ngrok.io/images/二维码.jpg</code></p></li></ul><p><img src="https://imgkr.cn-bj.ufileos.com/0e27ee10-1ac8-4b28-910b-5f7dab279061.png" alt="访问文件"></p><blockquote><p>内网穿透免费版网速较慢，只为可以实现内网资源在外网可以访问，一般只做接口调试使用。<br>如果需要更好的网速体验，请使用公网服务器。或者购买官方的加速服务器。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="技术" scheme="http://zone.dizent.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网络" scheme="http://zone.dizent.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ngrok" scheme="http://zone.dizent.cn/tags/ngrok/"/>
    
      <category term="服务器" scheme="http://zone.dizent.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群</title>
    <link href="http://zone.dizent.cn/2019/10/24/Docker%E5%AE%89%E8%A3%85Hadoop%E3%80%81Hbase%E3%80%81Zookeeper%E3%80%81Phoenix%E4%BC%AA%E9%9B%86%E7%BE%A4-1/"/>
    <id>http://zone.dizent.cn/2019/10/24/Docker%E5%AE%89%E8%A3%85Hadoop%E3%80%81Hbase%E3%80%81Zookeeper%E3%80%81Phoenix%E4%BC%AA%E9%9B%86%E7%BE%A4-1/</id>
    <published>2019-10-24T02:13:00.000Z</published>
    <updated>2020-05-09T01:46:44.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群"><a href="#Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群" class="headerlink" title="Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群"></a>Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群</h3><hr><p>准备条件：</p><ul><li>安装docker</li><li>docker容器配置内存8G及以上</li><li>shell命令行或者Mac控制台</li><li>安装Kitematic</li></ul><blockquote><p>Hadoop /Hbase/Zookeeper/phoenix安装环境已经集成在mysaber/hadoop：0.2.2镜像中，简单配置即可。</p></blockquote><h4 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h4><pre><code class="shell">$ docker pull mysaber/hadoop:0.2.2</code></pre><h4 id="使用命令查看docker镜像"><a href="#使用命令查看docker镜像" class="headerlink" title="使用命令查看docker镜像"></a>使用命令查看docker镜像</h4><pre><code class="shell">$  docker imagesREPOSITORY                                      TAG                 IMAGE ID            CREATED             SIZEmysaber/hadoop                                  0.2.2               89e80d91b1a5        3 days ago          4.14GB</code></pre><p>出现对应镜像表示拉取成功。</p><h4 id="配置对应的启动脚本文件“start-container-sh”"><a href="#配置对应的启动脚本文件“start-container-sh”" class="headerlink" title="配置对应的启动脚本文件“start-container.sh”"></a>配置对应的启动脚本文件“start-container.sh”</h4><pre><code class="shell">#!/bin/bash# the default node number is 3N=${1:-3}# start hadoop master container docker rm -f master &amp;&gt; /dev/nullecho &quot;start hadoopmaster container...&quot; docker run -itd \ #-v后两个参数，冒号前，为本地路径，后面用${localPath}代替，冒号后为容器路径，之后用${serverPath}代替        -v ${localPath}:/opt/docker \                --net=hadoop \                -p 50070:50070 \        -p 2181:2181 \                -p 8088:8088 \        -p 8765:8765 \                -p 60010:60010 \        -p 16020:16020 \        -p 16000:16000 \                -e ZOO_MY_ID=1 \                --name master \                --hostname master \                mysaber/hadoop:0.2.2 &amp;&gt; /dev/null# start hadoop slave containeri=1while [ $i -lt $N ]do    docker rm -f slave$i &amp;&gt; /dev/null    echo &quot;start hadoop-slave$i container...&quot;    docker run -itd \    -v ${localPath}:/opt/docker \                    --net=hadoop \            -p $((2181+$i)):2181 \                    --name slave$i \                    --hostname slave$i \                    -e ZOO_MY_ID=$(($i+1)) \                    mysaber/hadoop:0.2.2 &amp;&gt; /dev/null    i=$(( $i + 1 ))done # get into hadoop master container#docker exec -it master bash</code></pre><p>脚本将会启动三个容器，一个master、两个slave（slave1、slave2)</p><h4 id="使用Kitematic查看已经启动的镜像容器，选中master。点击exec可以进入容器内部。"><a href="#使用Kitematic查看已经启动的镜像容器，选中master。点击exec可以进入容器内部。" class="headerlink" title="使用Kitematic查看已经启动的镜像容器，选中master。点击exec可以进入容器内部。"></a>使用Kitematic查看已经启动的镜像容器，选中master。点击exec可以进入容器内部。</h4><p><img src="https://cdn.jsdelivr.net/gh/dizent/dizent.github.io@1.1/images/kitematic.png" alt="image-20191024093325950"></p><blockquote><p>如果没有安装Kitematic，则可以使用下面命令登陆容器内部：</p><pre><code class="shell">$ docker ps -aCONTAINER ID        IMAGE                  COMMAND             CREATED             STATUS              PORTS                                                                                                                                                                                      NAMES2c6e954fd7a0        mysaber/hadoop:0.2.2   &quot;/bin/bash&quot;         37 minutes ago      Up 37 minutes       8081/tcp, 8088/tcp, 8765/tcp, 50070/tcp, 60010/tcp, 0.0.0.0:2183-&gt;2181/tcp                                                                                                                 slave288deb95f7195        mysaber/hadoop:0.2.2   &quot;/bin/bash&quot;         37 minutes ago      Up 37 minutes       8081/tcp, 8088/tcp, 8765/tcp, 50070/tcp, 60010/tcp, 0.0.0.0:2182-&gt;2181/tcp                                                                                                                 slave1cd06942e2c58        mysaber/hadoop:0.2.2   &quot;/bin/bash&quot;         37 minutes ago      Up 37 minutes       0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:8088-&gt;8088/tcp, 0.0.0.0:8765-&gt;8765/tcp, 0.0.0.0:16000-&gt;16000/tcp, 0.0.0.0:16020-&gt;16020/tcp, 0.0.0.0:50070-&gt;50070/tcp, 0.0.0.0:60010-&gt;60010/tcp, 8081/tcp   master</code></pre><p>查看容器对应的container id</p><pre><code class="shell">$ docker exec -it cd06942e2c58 /bin/bash[root@master /]# </code></pre><p>出现以上结果表明正确进入容器内部。</p></blockquote><h4 id="在master容器中，修改hbase配置文件："><a href="#在master容器中，修改hbase配置文件：" class="headerlink" title="在master容器中，修改hbase配置文件："></a>在master容器中，修改hbase配置文件：</h4><pre><code class="shell">[root@master /]# vim  /opt/hbase/conf/hbase-site.xml</code></pre><p>在其中加入下面配置：(在标签<code>&lt;configuration&gt;&lt;/configuration&gt;</code>中，与其他property同级)</p><pre><code class="xml">&lt;property&gt;        &lt;name&gt;fs.default.name&lt;/name&gt;        &lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;</code></pre><p>在${localPath}新建编辑脚本文件<code>start-all.sh</code>：（或在/opt/docker目录下执行 vim start-all.sh)</p><pre><code class="shell">#!/bin/bashecho &quot;开始启动master。。。&quot;sh /opt/hadoop/sbin/stop-all.shwaitsh /opt/hadoop/bin/hadoop namenode -formatwaitsh /opt/hadoop/sbin/start-all.shwaitsh /opt/hadoop/bin/hdfs dfsadmin -safemode leavewaitsh /opt/zookeeper/bin/zkServer.sh startwaitecho &quot;master的hadoop和zookeeper启动完成！&quot;ssh root@slave1 &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooffecho &quot;2&quot; &gt; &quot;/opt/zookeeper/zkdata/myid&quot;cat /opt/zookeeper/zkdata/myidwaitsh /opt/zookeeper/bin/zkServer.sh startwaitexiteeooffecho &quot;slave1的zookeeper启动完成！&quot;ssh root@slave2 &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooffwecho &quot;3&quot; &gt; &quot;/opt/zookeeper/zkdata/myid&quot;cat /opt/zookeeper/zkdata/myidwaitsh /opt/zookeeper/bin/zkServer.sh startwaitexiteeooffwecho &quot;slave2的zookeeper启动完成！&quot;sh /opt/hbase/bin/start-hbase.shwaitecho &quot;hbase启动完成！&quot;sh /opt/hbase/bin/hbase shell</code></pre><p>切换到master容器，执行命令：</p><pre><code class="shell">sh-4.2# cd /opt/docker/sh-4.2# sh start-all.sh......hbase启动完成！2019-10-24 01:13:29,343 WARN  [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableHBase ShellUse &quot;help&quot; to get list of supported commands.Use &quot;exit&quot; to quit this interactive shell.Version 2.0.0, r7483b111e4da77adbfc8062b3b22cbe7c2cb91c1, Sun Apr 22 20:26:55 PDT 2018Took 0.0032 secondshbase(main):001:0&gt;</code></pre><p>出现以上结果，表示hadoop、zookeeper、hbase集群已经启动完成。可以再hbase中进行验证：</p><pre><code class="shell">hbase(main):001:0&gt; listTABLE0 row(s)Took 0.6531 seconds=&gt; []hbase(main):002:0&gt; create &#39;user&#39;,&#39;info&#39;Created table userTook 0.9004 seconds=&gt; Hbase::Table - user</code></pre><p>成功执行以上两条命令，表明hbase的查询和创建表都是正常的，如果出现问题的话，可以查看/opt/hbase/logs/中对应的log文件抛出的异常来进行排查。</p><blockquote><p>从服务列表中排查是否出错：在master中通过命令查询当前容器启动的服务列表：</p><pre><code class="shell">## 执行jps命令sh-4.2# jps896 SecondaryNameNode————hadoop的secondaryNameNode服务1507 HMaster————hbase的Hmaster服务1379 QuorumPeerMain————zookeeper服务1062 ResourceManager————hadoop的ResourceManager服务1611 HRegionServer————hbase的HRegionServer服务652 NameNode————hadoop的NameNode服务2094 Jps</code></pre><p>如果上述6个服务都启动成功，表明master中的服务正常。切换到slave中继续查看</p><pre><code class="shell">## 切换到slave1容器，可同理切换到slave2容器sh-4.2# ssh slave1Last login: Tue Oct  8 09:22:02 2019 from master## 执行jps命令[root@slave1 ~]# jps480 HRegionServer————hbase的HRegionServer服务130 DataNode————hadoop的DataNode服务402 QuorumPeerMain————zookeeper服务245 NodeManager————hadoop的NodeManager服务856 Jps</code></pre><p>slave1和slave2中的服务应该相同，如果出现缺少某服务的情况，可在对应容器中，cd到对应服务的目录下/opt/hadoop|hbase|zookeeper的logs目录中查看对应服务的启动运行日志。</p></blockquote><h4 id="配置Phoenix"><a href="#配置Phoenix" class="headerlink" title="配置Phoenix"></a>配置Phoenix</h4><p>切换到master容器，进入phoenix目录：</p><pre><code class="shell">[root@slave1 ~]# ssh masterLast login: Tue Oct  8 09:22:02 2019 from master[root@master ~]# cd /opt/phoenix/bin/[root@master bin]#</code></pre><p>启动phoenix的queryserver：</p><pre><code class="shell">[root@master bin]# ./queryserver.py startstarting Query Server, logging to /tmp/phoenix/phoenix-root-queryserver.log## 检查queryserver是否已经启动[root@master bin]# jps896 SecondaryNameNode2624 Jps1507 HMaster1379 QuorumPeerMain2596 QueryServer————phoenix的queryserver服务1062 ResourceManager1611 HRegionServer652 NameNode</code></pre><h4 id="phoenix命令行"><a href="#phoenix命令行" class="headerlink" title="phoenix命令行"></a>phoenix命令行</h4><p>phoenix也提供了一个类似于MySQL的命令行的工具，在phoenix的bin目录下执行：</p><pre><code class="shell">[root@master bin]# ./sqlline.pySetting property: [incremental, false]Setting property: [isolation, TRANSACTION_READ_COMMITTED]issuing: !connect jdbc:phoenix: none none org.apache.phoenix.jdbc.PhoenixDriverConnecting to jdbc:phoenix:SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/opt/phoenix/phoenix-5.0.0-HBase-2.0-client.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/opt/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.19/10/24 02:31:53 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicableConnected to: Phoenix (version 5.0)Driver: PhoenixEmbeddedDriver (version 5.0)Autocommit status: trueTransaction isolation: TRANSACTION_READ_COMMITTEDBuilding list of tables and columns for tab-completion (set fastconnect to true to skip)...133/133 (100%) DoneDonesqlline version 1.2.00: jdbc:phoenix:&gt;</code></pre><p>出现上述结果表示成功进入phoenix，可以尝试执行创建表格（创建表格注意事项，在下方有提及）</p><pre><code class="shell">0: jdbc:phoenix:&gt; create table visit_details (        inc_id varchar(32) not null,        area_code varchar(32)  ,        area_name varchar(32)  ,        department_code varchar(32)  ,        department_name varchar(32)  ,        visit_type tinyint default 0  ,        patient_code varchar(32) not null  ,        address varchar(128)   ,        address_split varchar(128) ,        address_province varchar(32) ,        address_city varchar(32)   ,        address_district varchar(32)  ,        address_town varchar(32)  ,        address_street varchar(128) ,        gender tinyint default 0 ,        age integer ,        visit_at timestamp ,        operate_at timestamp ,        created_at timestamp not null ,        updated_at timestamp not null   CONSTRAINT PK PRIMARY KEY (inc_id, patient_code, created_at, updated_at) );</code></pre><p>phoenix的表格默认为全局索引，在本docker镜像中已经配置了对应的耳机索引，可通过下方命令创建索引：</p><pre><code class="shell">0: jdbc:phoenix:&gt; create index op_index on visit_details(operate_at);No rows affected (5.957 seconds)</code></pre><p>通过!table命令查看表格以及索引：</p><pre><code class="shell">0: jdbc:phoenix:&gt; !table+------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+| TABLE_CAT  | TABLE_SCHEM  |   TABLE_NAME   |  TABLE_TYPE   | REMARKS  | TYPE_NAME  | SELF_REFERENCING_COL_NAME  | REF_GENERATION  | INDEX_STATE  | IMMUTABLE_ROWS  | SALT_BUCKETS  | MULTI_TENANT  | VIEW_STATEMENT  | VIEW_TYPE  | INDEX_TYPE  | TRANSACTIONAL  |  |+------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+|            |              | OP_INDEX       | INDEX         |          |            |                            |                 | ACTIVE       | false           | null          | false         |                 |            | GLOBAL      | false          |  ||            | SYSTEM       | CATALOG        | SYSTEM TABLE  |          |            |                            |                 |              | false           | null          | false         |                 |            |             | false          |  ||            | SYSTEM       | FUNCTION       | SYSTEM TABLE  |          |            |                            |                 |              | false           | null          | false         |                 |            |             | false          |  ||            | SYSTEM       | LOG            | SYSTEM TABLE  |          |            |                            |                 |              | true            | 32            | false         |                 |            |             | false          |  ||            | SYSTEM       | SEQUENCE       | SYSTEM TABLE  |          |            |                            |                 |              | false           | null          | false         |                 |            |             | false          |  ||            | SYSTEM       | STATS          | SYSTEM TABLE  |          |            |                            |                 |              | false           | null          | false         |                 |            |             | false          |  ||            |              | VISIT_DETAILS  | TABLE         |          |            |                            |                 |              | false           | null          | false         |                 |            |             | false          |  |+------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+</code></pre><p>接下来使用dataX将MySQL数据导入phoenix，接下来使用dataX将MySQL数据导入phoenix，phoenix的使用注意事项，可以查看：<a href="http://www.dizent.cn/2019/10/16/Phoenix/" target="_blank" rel="noopener">使用DATAX将MySQL导入Phoenix</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据" scheme="http://zone.dizent.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="bigdata" scheme="http://zone.dizent.cn/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>使用DATAX将MySQL导入Phoenix</title>
    <link href="http://zone.dizent.cn/2019/10/16/Phoenix/"/>
    <id>http://zone.dizent.cn/2019/10/16/Phoenix/</id>
    <published>2019-10-16T01:07:00.000Z</published>
    <updated>2020-05-09T01:46:44.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="使用DATAX将MySQL导入Phoenix"><a href="#使用DATAX将MySQL导入Phoenix" class="headerlink" title="使用DATAX将MySQL导入Phoenix"></a>使用DATAX将MySQL导入Phoenix</h2><h3 id="安装Hadoop、Zookeeper、Hbase-2-X、Phoenix-5-X"><a href="#安装Hadoop、Zookeeper、Hbase-2-X、Phoenix-5-X" class="headerlink" title="安装Hadoop、Zookeeper、Hbase 2.X、Phoenix 5.X"></a>安装Hadoop、Zookeeper、Hbase 2.X、Phoenix 5.X</h3><pre><code class="shell">$ docker pull mysaber/hadoop 0.1.5</code></pre><h3 id="配置Phoenix-5-X"><a href="#配置Phoenix-5-X" class="headerlink" title="配置Phoenix 5.X"></a>配置Phoenix 5.X</h3><pre><code class="shell">//复制hbase配置到phoenix$ cp {HBase_Home}/conf/hbase-site.xml {phoenix_home}/bin///拷贝phoenix下的把 phoenix-&lt;version&gt;-server.jar、phoenix-core-&lt;version&gt;.jar 拷贝到hbaseServer的lib目录下{Hbase_Home}/lib</code></pre><h3 id="下载DataX源码并进行编译"><a href="#下载DataX源码并进行编译" class="headerlink" title="下载DataX源码并进行编译"></a>下载DataX源码并进行编译</h3><pre><code class="shell">$ git clone https://github.com/alibaba/DataX.git</code></pre><h3 id="在Phoenix中创建与MySQL相对应的table"><a href="#在Phoenix中创建与MySQL相对应的table" class="headerlink" title="在Phoenix中创建与MySQL相对应的table"></a>在Phoenix中创建与MySQL相对应的table</h3><p>Phoenix的数据类型,注意修改MySQL表中数据到对应数据类型，另外not null需要与primary key联合使用</p><ul><li>INTEGER</li><li>UNSIGNED_INT</li><li>BIGINT</li><li>UNSIGNED_LONG</li><li>TINYINT</li><li>UNSIGNED_TINYINT</li><li>SMALLINT</li><li>UNSIGNED_SMALLINT</li><li>FLOAT</li><li>UNSIGNED_FLOAT</li><li>DOUBLE</li><li>UNSIGNED_DOUBLE</li><li>DECIMAL</li><li>BOOLEAN</li><li>TIME</li><li>DATE</li><li>TIMESTAMP</li><li>UNSIGNED_TIME</li><li>UNSIGNED_DATE</li><li>UNSIGNED_TIMESTAMP</li><li>VARCHAR</li><li>CHAR</li><li>BINARY</li><li>VARBINARY</li><li>ARRAY</li></ul><p>例如驾驶舱中的visit_details可修改为：</p><pre><code class="mssql">create table visit_details (        inc_id varchar(32) not null,        area_code varchar(32)  ,        area_name varchar(32)  ,        department_code varchar(32)  ,        department_name varchar(32)  ,        visit_type tinyint default 0  ,        patient_code varchar(32) not null  ,        address varchar(128)   ,        address_split varchar(128) ,        address_province varchar(32) ,        address_city varchar(32)   ,        address_district varchar(32)  ,        address_town varchar(32)  ,        address_street varchar(128) ,        gender tinyint default 0 ,        age integer ,        visit_at timestamp ,        operate_at timestamp ,        created_at timestamp not null ,        updated_at timestamp not null   CONSTRAINT PK PRIMARY KEY (inc_id, patient_code, created_at, updated_at) );</code></pre><p>插入语句示例：</p><pre><code class="mssql">UPSERT INTO visit_details(inc_id, area_code, area_name, department_code, department_name, visit_type, patient_code, address, address_split, address_province, address_city, address_district, address_town, address_street, gender, age, visit_at, operate_at, created_at, updated_at) VALUES (&#39;0000011ccc654b518edbce2b3e58afa2&#39;, &#39;9&#39;, &#39;江南分院&#39;, &#39;0204&#39;, &#39;江南急诊科&#39;, 1, &#39;1000003834429&#39;, &#39;重庆市万州区石峰路999号&#39;, &#39;重庆市-万州区-石峰路999号&#39;, &#39;重庆市&#39;, NULL, &#39;万州区&#39;, NULL, &#39;石峰路999号&#39;, 1, 3, &#39;2019-02-10 22:43:11&#39;, &#39;2019-02-10 20:29:19&#39;, &#39;2019-08-01 00:39:43&#39;, &#39;2019-08-01 00:39:43&#39;);</code></pre><blockquote><p>Datax源码编译（源码plugins太多，可以将主目录下pom.xml文件中的不需要的module注释掉）</p><pre><code class="shell">$ cd  {DataX_source_code_home}$ mvn -U clean package assembly:assembly -Dmaven.test.skip=true</code></pre></blockquote><p>在编译的目录下，进入target目录，可以找到编译后的datax。</p><blockquote><p>Phoenix开启QueryServer;服务器需要开启8765端口，docker则需要开放并映射8765端口</p><pre><code class="shell">$ cd {Phoenix_Home}/bin$ ./queryServer.py start</code></pre></blockquote><p>编辑DataX的Job文件：</p><ol><li><p>新建一个json文件：mysql2phoenix.json</p><pre><code class="json">{  job:{    &quot;content&quot;:[        {            &quot;reader&quot;:$Reader_Object,            &quot;writer&quot;:$Writer_Object        }    ],    &quot;setting&quot;:{        &quot;speed&quot;:{            &quot;byte&quot;:1048576,      //同时开启的进程数            &quot;channel&quot;:16,      //分片的记录条数            &quot;record&quot;:10000        }    }}}</code></pre><p>Reader Object</p></li></ol><pre><code class="json">            {        //name为datax的plugin目录下的插件名        &quot;name&quot;:&quot;mysqlreader&quot;,         //paramter为插件所需要的参数，各插件各不相同                &quot;parameter&quot;:{                    &quot;connection&quot;:[                        {                              //mysql连接地址，可配多个                            &quot;jdbcUrl&quot;:[                                &quot;jdbc:mysql://localhost:3306/odc_v2&quot;                            ],                              //mysql查询SQL语句，列名顺序和列数需要和writer中的相同                            &quot;querySql&quot;:[                                &quot;select * from visit_details;&quot;                            ]                        }                    ],                    &quot;password&quot;:&quot;******&quot;,                    &quot;username&quot;:&quot;root&quot;                }</code></pre><p>Writer_Object</p><pre><code class="json">{                  //write的插件名                &quot;name&quot;:&quot;hbase20xsqlwriter&quot;,                &quot;parameter&quot;:{                      //单次提交的条数                    &quot;batchSize&quot;:&quot;100&quot;,                    &quot;column&quot;:[                        &quot;INC_ID&quot;,                        &quot;AREA_CODE&quot;,                        &quot;AREA_NAME&quot;,                        &quot;DEPARTMENT_CODE&quot;,                        &quot;DEPARTMENT_NAME&quot;,                        &quot;VISIT_TYPE&quot;,                        &quot;PATIENT_CODE&quot;,                        &quot;ADDRESS&quot;,                        &quot;ADDRESS_SPLIT&quot;,                        &quot;ADDRESS_PROVINCE&quot;,                        &quot;ADDRESS_CITY&quot;,                        &quot;ADDRESS_DISTRICT&quot;,                        &quot;ADDRESS_TOWN&quot;,                        &quot;ADDRESS_STREET&quot;,                        &quot;GENDER&quot;,                        &quot;AGE&quot;,                        &quot;VISIT_AT&quot;,                        &quot;OPERATE_AT&quot;,                        &quot;CREATED_AT&quot;,                        &quot;UPDATED_AT&quot;                    ],                      //空值处理策略，有skip和set null                    &quot;nullMode&quot;:&quot;skip&quot;,                      //服务地址                    &quot;queryServerAddress&quot;:&quot;http://server-Ip:8765&quot;,                    //写入表                      &quot;table&quot;:&quot;VISIT_DETAILS&quot;                }            }</code></pre><h3 id="运行DataX"><a href="#运行DataX" class="headerlink" title="运行DataX"></a>运行DataX</h3><pre><code class="python">$ cd {DataX_Home}/bin$ python datax.py {Your_Job_Path}/mysql2phoenix.json</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="中间件" scheme="http://zone.dizent.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="bigdata" scheme="http://zone.dizent.cn/tags/bigdata/"/>
    
  </entry>
  
</feed>

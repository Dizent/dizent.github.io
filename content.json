{"meta":{"title":"Dizent","subtitle":"千头万绪君不知,来年柳绿故人迟.","description":null,"author":"Dizent","url":"http://zone.dizent.cn","root":"/"},"pages":[{"title":"","date":"06/01/2020","updated":"06/01/2020","comments":true,"path":"404.html","permalink":"http://zone.dizent.cn/404.html","excerpt":"","text":"L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"scale\":1,\"hHeadPos\":0.5,\"vHeadPos\":0.618,\"jsonPath\":\"/live2dw/assets/assets/tororo.model.json\"},\"display\":{\"superSample\":2,\"width\":120,\"height\":200,\"position\":\"left\",\"hOffset\":20,\"vOffset\":50},\"mobile\":{\"show\":true,\"scale\":0.5},\"react\":{\"opacityDefault\":0.7,\"opacityOnHover\":0.2},\"log\":false});"},{"title":"","date":"02/01/2020","updated":"02/01/2020","comments":true,"path":"manifest.json","permalink":"http://zone.dizent.cn/manifest.json","excerpt":"","text":"{\"name\":\"Dizent\",\"short_name\":\"dizent\",\"theme_color\":\"#2196f3\",\"background_color\":\"#2196f3\",\"display\":\"standalone\",\"Scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/icons/icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-128x128.png\",\"sizes\":\"128x128\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-152x152.png\",\"sizes\":\"152x152\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-384x384.png\",\"sizes\":\"384x384\",\"type\":\"image/png\"},{\"src\":\"images/icons/icon-512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"","date":"06/01/2020","updated":"06/01/2020","comments":true,"path":"404/index.html","permalink":"http://zone.dizent.cn/404/index.html","excerpt":"","text":"&lt;!DOCTYPE html&gt; 404 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"scale\":1,\"hHeadPos\":0.5,\"vHeadPos\":0.618,\"jsonPath\":\"/live2dw/assets/assets/tororo.model.json\"},\"display\":{\"superSample\":2,\"width\":120,\"height\":200,\"position\":\"left\",\"hOffset\":20,\"vOffset\":50},\"mobile\":{\"show\":true,\"scale\":0.5},\"react\":{\"opacityDefault\":0.7,\"opacityOnHover\":0.2},\"log\":false});"},{"title":"关于我","date":"24/10/2019","updated":"26/04/2020","comments":false,"path":"about/index.html","permalink":"http://zone.dizent.cn/about/index.html","excerpt":"","text":"[さくら荘のDizent] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"bangumi","date":"10/04/2020","updated":"26/04/2020","comments":false,"path":"bangumi/index.html","permalink":"http://zone.dizent.cn/bangumi/index.html","excerpt":"","text":""},{"title":"books","date":"02/01/2020","updated":"02/01/2020","comments":true,"path":"books/index.html","permalink":"http://zone.dizent.cn/books/index.html","excerpt":"","text":""},{"title":"client","date":"20/12/2018","updated":"26/04/2020","comments":false,"path":"client/index.html","permalink":"http://zone.dizent.cn/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"donate","date":"20/12/2018","updated":"26/04/2020","comments":false,"path":"donate/index.html","permalink":"http://zone.dizent.cn/donate/index.html","excerpt":"","text":""},{"title":"分类","date":"20/01/2018","updated":"30/04/2020","comments":false,"path":"categories/index.html","permalink":"http://zone.dizent.cn/categories/index.html","excerpt":"","text":"文章分类"},{"title":"comment","date":"20/12/2018","updated":"26/04/2020","comments":true,"path":"comment/index.html","permalink":"http://zone.dizent.cn/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"lab","date":"05/01/2019","updated":"26/04/2020","comments":false,"path":"lab/index.html","permalink":"http://zone.dizent.cn/lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"movies","date":"02/01/2020","updated":"02/01/2020","comments":true,"path":"movies/index.html","permalink":"http://zone.dizent.cn/movies/index.html","excerpt":"","text":""},{"title":"友情链接","date":"06/11/2019","updated":"26/04/2020","comments":true,"path":"links/index.html","permalink":"http://zone.dizent.cn/links/index.html","excerpt":"","text":""},{"title":"🎵Dizent音乐台","date":"07/11/2019","updated":"03/01/2020","comments":false,"path":"music/index.html","permalink":"http://zone.dizent.cn/music/index.html","excerpt":"","text":"纯音乐 小语种"},{"title":"记录世界的美好","date":"07/11/2019","updated":"28/01/2020","comments":false,"path":"photos/index.html","permalink":"http://zone.dizent.cn/photos/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"04/01/2019","updated":"26/04/2020","comments":false,"path":"theme-sakura/index.html","permalink":"http://zone.dizent.cn/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"},{"title":"分类","date":"20/01/2018","updated":"14/09/2020","comments":false,"path":"tags/index.html","permalink":"http://zone.dizent.cn/tags/index.html","excerpt":"","text":""},{"title":"video","date":"20/12/2018","updated":"26/04/2020","comments":false,"path":"video/index.html","permalink":"http://zone.dizent.cn/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"}],"posts":[{"title":"测试","slug":"测试","date":"11/06/2020","updated":"11/06/2020","comments":true,"path":"2020/06/11/测试/","link":"","permalink":"http://zone.dizent.cn/2020/06/11/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"部署 Hexo","slug":"部署 Hexo","date":"29/05/2020","updated":"29/05/2020","comments":true,"path":"2020/05/29/部署 Hexo/","link":"","permalink":"http://zone.dizent.cn/2020/05/29/%E9%83%A8%E7%BD%B2%20Hexo/","excerpt":"","text":"部署 Hexo部署到 GitHub#准备工作如果没有账号，请点此前往 GitHub 注册一个 GitHub 账号。 新建一个公开仓库，仓库名格式为 your_username.github.io 例如你的 GitHub 用户名是 easyhexo ，那么你的仓库地址名称就应该是 easyhexo.github.io 创建完成后记下该仓库的 HTTPS/SSH 地址，一般格式为 https://github.com/your_username/your_reponame.git 在下一步会用到。 安装部署插件$ npm install hexo-deployer-git --save $ npm install hexo-server --save 配置 Git如果你只是安装好了 Git 但没有配置过你的 Git ，那么现在需要做的第一件事情就是设置你的 Git 用户名和邮箱。 在 Git Bash 中执行以下两条命令配置你的用户名和邮箱，这里建议用户名和邮箱与你的 GitHub 用户名和邮箱保持一致。 $ git config --global user.name &quot;Your_user_name&quot; $ git config --global user.email Your_email@example.com 提醒 每次 Git 提交时都会附带这两条信息，用于记录是谁提交的更新，并且会随更新内容一起被记录到历史记录中。简单说，是用来标记的你的身份的～ 配置站点 _config.yml 文件deploy: type: git # 类型填git repo: &lt;repository url&gt; # 你的Github仓库地址 branch: master # 分支名称。默认填写 master 如果您使用的是 GitHub ，程序会尝试自动检测。 message: # 提交信息可以自定义，不填的则默认为提交时间 发布到 GitHub在本地的 Hexo 站点根目录下，执行如下命令即可部署到 GitHub Pages 上。 $ hexo clean &amp;&amp; hexo d -g 提醒 如果是第一次使用，会弹出一个登录框，需要登录你的 GitHub 账号。 自定义域名如果你拥有个人域名，请用 A 记录解析到以下 IP 中的任意一个。如果使用 CNAME 请解析到你的 GitHub 仓库名称。 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 参考表格 记录类型 主机记录 解析路线 记录值 MAX 优先级 TTL（秒） A @ 默认 185.199.110.153 - 600 CNAME @ 默认 GitHub博客仓库名称 - 600 打开仓库设置，找到 GitHub Pages 项目，修改 Custom domain 选项的值为你的自定义域名（不带 http 等前缀） 勾选 Custom domain 选项下的 Enforce HTTPS 选项，强制开启 Https 。如果遇到 Enforce HTTPS 选项无法打开，可以稍等一会儿再尝试。 提醒 同时需要在本地的 source 目录新建一个 CNAME 文件，内容为你的自定义域名（不带 http 等前缀）。否则无法使用自定义域名功能（ hexo d 生成的文件没有 CNAME 文件，导致仓库的自定域名设置失效）","categories":[],"tags":[]},{"title":"Flink入门-简介","slug":"Flink入门-简介","date":"27/05/2020","updated":"27/05/2020","comments":true,"path":"2020/05/27/Flink入门-简介/","link":"","permalink":"http://zone.dizent.cn/2020/05/27/Flink%E5%85%A5%E9%97%A8-%E7%AE%80%E4%BB%8B/","excerpt":"","text":"前言 Flink 是一种流式计算框架，为什么我会接触到 Flink 呢？","author":"Dizent","categories":[{"name":"Flink","slug":"Flink","permalink":"http://zone.dizent.cn/categories/Flink/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://zone.dizent.cn/tags/bigdata/"}]},{"title":"使用coding持续集成部署springboot项目到服务器","slug":"使用coding持续集成部署springboot项目到服务器","date":"21/02/2020","updated":"11/06/2020","comments":true,"path":"2020/02/21/使用coding持续集成部署springboot项目到服务器/","link":"","permalink":"http://zone.dizent.cn/2020/02/21/%E4%BD%BF%E7%94%A8coding%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"准备条件： 本地可运行的springboot项目，本文以Maven项目为例，构建打包均使用Maven命令 拥有服务器的私钥 拥有push权限的coding账号和本地可以成功push代码到coding 能理解基础的git、mvn、shell脚本命令 实现步骤将代码推送到coding仓库 新建一个coding仓库，项目模板选择DevOps 项目名称自选，例如“范例”，其他均为默认，Git仓库（下方多选框不选） 进入项目代码仓库，复制git地址。https://e.coding.net/dizent/fanli.git 进入本地项目目录，使用命令行将代码推送至仓库。 cd 项目目录 git init git remote add origin https://e.coding.net/dizent/fanli.git #替换为你的仓库地址 git add . git commit -m &quot;项目初始化&quot; git push origin master 查看仓库中是否已有代码，即操作成功 构建配置新的构建计划 选择项目左侧菜单栏构建与部署 –&gt;构建 在内容区域选择新建构建配置 输入计划名称，代码源选择coding、仓库选需要构建的仓库 配置来源使用静态配置的JenkinsFile–&gt;并行过程模板 勾选前往流程配置，点击保存修改流程配置 选择文本编辑器 配置解读 配置采用pipeline 默认环境下需要添加agent any ，表示“在 CODING 提供的云主机上执行 Pipeline 或 stage” 构建步骤将在stages下分布进行，每个子stage都代表一个阶段 阶段配置 检出： stage(&#39;检出&#39;) { steps { checkout([$class: &#39;GitSCM&#39;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]]) } } 在仓库检出，此阶段配置无需改动，都默认为上一步构建计划的参数 构建 stage(&#39;构建&#39;) { steps { echo &#39;构建中...&#39; sh &#39;java -version&#39; sh &#39;mvn package&#39; echo &#39;构建完成.&#39; archiveArtifacts(artifacts: &#39;**/target/*.jar&#39;, fingerprint: true) } } echo为输出信息，不作其他解释 检查Java版本 Maven打包，打包在项目路径的../target/*.jar 收集打包后的文件 测试 stage(&#39;测试&#39;) { steps { echo &#39;单元测试中...&#39; sh &#39;mvn test&#39; echo &#39;单元测试完成.&#39; } } 执行Maven测试，测试test包下的代码 部署 stage(&#39;部署&#39;) { steps { echo &#39;部署中...&#39; script { def remote = [:] remote.name = &#39;web-server&#39; remote.allowAnyHosts = true remote.host = &#39;服务器ip地址&#39; remote.user = &#39;服务器用户名&#39; // 需要先创建一对 SSH 密钥，把私钥放在 CODING 凭据管理，把公钥放在服务器的 `.ssh/authorized_keys`，实现免密码登录 withCredentials([sshUserPrivateKey(credentialsId: &quot;057*****-****-****-****-*******16f0a&quot;, keyFileVariable: &#39;id_rsa&#39;)]) { remote.identityFile = id_rsa // SSH 上传文件到远端服务器 “fanli-0.0.1-SNAPSHOT.jar”是生成的jar文件，into后是服务器端的目录 sshPut remote: remote, from: &#39;target/fanli-0.0.1-SNAPSHOT.jar&#39;, into: &#39;/usr/local/java&#39; // 重启 服务器。在服务器端编写“deploy.sh”脚本进行项目启动控制 sshCommand remote: remote, sudo: true, command: &quot;sh /usr/local/java/deploy.sh restart&quot; } echo &#39;部署完成&#39; } 在script中编写提交到服务器的脚本 配置服务器的ssh密钥，并导入coding凭据。相关操作见coding使用凭证进行认证 上传文件到服务器 运行服务器端的脚本deploy.sh deploy.sh脚本内容如下 #!/bin/sh ## java 环境 export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64 ## jre环境 export JRE_HOME=$JAVA_HOME/jre ## jar包推送路径 export RUN_PATH=/usr/local/java ## jar包名字 API_NAME=fanli-0.0.1-SNAPSHOT JAR_NAME=$API_NAME\\.jar #PID 代表是PID文件 PID=$RUN_PATH/$API_NAME\\.pid #使用说明，用来提示输入参数 usage() { echo &quot;Usage: sh 执行脚本.sh [start|stop|restart|status]&quot; exit 1 } #检查程序是否在运行 is_exist(){ pid=`ps -ef|grep $JAR_NAME|grep -v grep|awk &#39;{print $2}&#39; ` #如果不存在返回1，存在返回0 if [ -z &quot;${pid}&quot; ]; then return 1 else return 0 fi } #启动方法 start(){ is_exist if [ $? -eq &quot;0&quot; ]; then echo &quot;&gt;&gt;&gt; ${JAR_NAME} is already running PID=${pid} &lt;&lt;&lt;&quot; else nohup $JRE_HOME/bin/java -Xms256m -Xmx512m -jar $RUN_PATH/$JAR_NAME &gt; $RUN_PATH/fanli.out &amp; echo $! &gt; $PID echo &quot;&gt;&gt;&gt; start $JAR_NAME successed PID=$! &lt;&lt;&lt;&quot; fi } #停止方法 stop(){ #is_exist pidf=$(cat $PID) #echo &quot;$pidf&quot; echo &quot;&gt;&gt;&gt; api PID = $pidf begin kill $pidf &lt;&lt;&lt;&quot; kill $pidf rm -rf $PID sleep 2 is_exist if [ $? -eq &quot;0&quot; ]; then echo &quot;&gt;&gt;&gt; api 2 PID = $pid begin kill -9 $pid &lt;&lt;&lt;&quot; kill -9 $pid sleep 2 echo &quot;&gt;&gt;&gt; $JAR_NAME process stopped &lt;&lt;&lt;&quot; else echo &quot;&gt;&gt;&gt; ${JAR_NAME} is not running &lt;&lt;&lt;&quot; fi } #输出运行状态 status(){ is_exist if [ $? -eq &quot;0&quot; ]; then echo &quot;&gt;&gt;&gt; ${JAR_NAME} is running PID is ${pid} &lt;&lt;&lt;&quot; else echo &quot;&gt;&gt;&gt; ${JAR_NAME} is not running &lt;&lt;&lt;&quot; fi } #重启 restart(){ stop start } #根据输入参数，选择执行对应方法，不输入则执行使用说明 case &quot;$1&quot; in &quot;start&quot;) start ;; &quot;stop&quot;) stop ;; &quot;status&quot;) status ;; &quot;restart&quot;) restart ;; *) usage ;; esac exit 0 触发规则 选择自己需要的出发规则：例如，代码更新时执行，当执行git push之后，构建进行将执行 变量与缓存 可以将上方用到的变量使用变量配置，即可多项目使用 缓存目录：项目目录 Maven打开 通知提醒 选择在构建时开启邮件提醒，并选择成员 开始构建所有配置完成之后，即可点击开始构建 ，可以查看构建进度。 参考文章： coding部署到-Linux-Web-服务器 coding在持续集成中使用凭据 Linux 运行jar包命令 【springboot】之利用shell脚本优雅启动，关闭springboot服务","author":"Dizent","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://zone.dizent.cn/tags/Java/"}]},{"title":"hadoop、hbase、zk伪集群服务单独启动命令","slug":"hadoop、hbase、zk伪集群服务单独启动命令","date":"19/02/2020","updated":"09/05/2020","comments":true,"path":"2020/02/19/hadoop、hbase、zk伪集群服务单独启动命令/","link":"","permalink":"http://zone.dizent.cn/2020/02/19/hadoop%E3%80%81hbase%E3%80%81zk%E4%BC%AA%E9%9B%86%E7%BE%A4%E6%9C%8D%E5%8A%A1%E5%8D%95%E7%8B%AC%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"服务名 重启命令 对应服务 SecondaryNameNode sh /opt/hadoop/sbin/start-dfs.sh hadoop ResourceManager sh /opt/hadoop/sbin/start-yarn.sh hadoop NameNode sh /opt/hadoop/sbin/start-dfs.sh hadoop HRegionServer sh /opt/hbase/bin/hbase-daemon.sh start regionserver hbase HMaster sh /opt/hbase/bin/hbase-daemon.sh start master hbase QuorumPeerMain zookeeper","author":"Dizent","categories":[{"name":"大数据","slug":"大数据","permalink":"http://zone.dizent.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://zone.dizent.cn/tags/bigdata/"}]},{"title":"简单实现内网穿透","slug":"简单实现内网穿透","date":"16/12/2019","updated":"09/05/2020","comments":true,"path":"2019/12/16/简单实现内网穿透/","link":"","permalink":"http://zone.dizent.cn/2019/12/16/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","excerpt":"","text":"本地实现内网穿透 工具：ngrok 环境：Mac OS 10.15 其他工具：nginx 配置nginx 使用homebrew安装nginx $ brew install nginx 通过homebrew安装的工具，会保存在/usr/local/etc目录下 启动nginx $ nginx 打开浏览器，输入http://localhost:8080,看到以下界面，表示安装成功。 修改nginx配置 进入nginx目录： $ cd /usr/local/etc/nginx $ vim nginx.conf 修改nginx.conf文件中的下面部分 server { #修改端口号 listen 80; server_name localhost; location / { #修改根目录 root /Users/dizent/Documents/themes/Site/Category/; index index.html index.htm; } …… 我在Users/dizent/Documents/themes/Site/Category目录下放置了一些静态页面，以便调试。 保存后重新启动 $ nginx -s reload 浏览器打开页面可以看到 内网穿透 经过上一章的操作，在本地已经可以通过浏览器访问该文件夹下的文件，接下来我们就要操作内网穿透，使用户可以在所有地方都可以访问该网页。 安装ngrok 进入ngrok官网下载安装包：https://ngrok.com/download 下载之后，打开下载目录，并解压 $ unzip /ngrok.zip 获取授权 注册登录ngrok账号 进入：https://dashboard.ngrok.com/auth 复制授权码，在终端输入命令：`shell$ cd [ngrok目录] $ ./ngrok authtoken [授权码] 4. 开启内网穿透 ```shell $ ./ngrok http 80 ngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account Dizent (Plan: Free) Version 2.3.34 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://13e89141.ngrok.io -&gt; http://localhost:80 Forwarding https://13e89141.ngrok.io -&gt; http://localhost:80 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 出现以上代码时表明启动成功。 在任意联网的设备输入上述地址：http://13e89141.ngrok.io 使用内网穿透分享文件 在刚才放置网站的文件夹下，访问任意想分享的文件，例如： 我在根目录下新建了一个/images文件夹，并放置了一张图片，命名为二维码.jpg 在浏览器输入http://13e89141.ngrok.io/images/二维码.jpg 内网穿透免费版网速较慢，只为可以实现内网资源在外网可以访问，一般只做接口调试使用。如果需要更好的网速体验，请使用公网服务器。或者购买官方的加速服务器。","author":"Dizent","categories":[{"name":"技术","slug":"技术","permalink":"http://zone.dizent.cn/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://zone.dizent.cn/tags/%E7%BD%91%E7%BB%9C/"},{"name":"ngrok","slug":"ngrok","permalink":"http://zone.dizent.cn/tags/ngrok/"},{"name":"服务器","slug":"服务器","permalink":"http://zone.dizent.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群","slug":"Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群-1","date":"24/10/2019","updated":"09/05/2020","comments":true,"path":"2019/10/24/Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群-1/","link":"","permalink":"http://zone.dizent.cn/2019/10/24/Docker%E5%AE%89%E8%A3%85Hadoop%E3%80%81Hbase%E3%80%81Zookeeper%E3%80%81Phoenix%E4%BC%AA%E9%9B%86%E7%BE%A4-1/","excerpt":"","text":"Docker安装Hadoop、Hbase、Zookeeper、Phoenix伪集群 准备条件： 安装docker docker容器配置内存8G及以上 shell命令行或者Mac控制台 安装Kitematic Hadoop /Hbase/Zookeeper/phoenix安装环境已经集成在mysaber/hadoop：0.2.2镜像中，简单配置即可。 拉取docker镜像$ docker pull mysaber/hadoop:0.2.2 使用命令查看docker镜像$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE mysaber/hadoop 0.2.2 89e80d91b1a5 3 days ago 4.14GB 出现对应镜像表示拉取成功。 配置对应的启动脚本文件“start-container.sh”#!/bin/bash # the default node number is 3 N=${1:-3} # start hadoop master container docker rm -f master &amp;&gt; /dev/null echo &quot;start hadoopmaster container...&quot; docker run -itd \\ #-v后两个参数，冒号前，为本地路径，后面用${localPath}代替，冒号后为容器路径，之后用${serverPath}代替 -v ${localPath}:/opt/docker \\ --net=hadoop \\ -p 50070:50070 \\ -p 2181:2181 \\ -p 8088:8088 \\ -p 8765:8765 \\ -p 60010:60010 \\ -p 16020:16020 \\ -p 16000:16000 \\ -e ZOO_MY_ID=1 \\ --name master \\ --hostname master \\ mysaber/hadoop:0.2.2 &amp;&gt; /dev/null # start hadoop slave container i=1 while [ $i -lt $N ] do docker rm -f slave$i &amp;&gt; /dev/null echo &quot;start hadoop-slave$i container...&quot; docker run -itd \\ -v ${localPath}:/opt/docker \\ --net=hadoop \\ -p $((2181+$i)):2181 \\ --name slave$i \\ --hostname slave$i \\ -e ZOO_MY_ID=$(($i+1)) \\ mysaber/hadoop:0.2.2 &amp;&gt; /dev/null i=$(( $i + 1 )) done # get into hadoop master container #docker exec -it master bash 脚本将会启动三个容器，一个master、两个slave（slave1、slave2) 使用Kitematic查看已经启动的镜像容器，选中master。点击exec可以进入容器内部。 如果没有安装Kitematic，则可以使用下面命令登陆容器内部： $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2c6e954fd7a0 mysaber/hadoop:0.2.2 &quot;/bin/bash&quot; 37 minutes ago Up 37 minutes 8081/tcp, 8088/tcp, 8765/tcp, 50070/tcp, 60010/tcp, 0.0.0.0:2183-&gt;2181/tcp slave2 88deb95f7195 mysaber/hadoop:0.2.2 &quot;/bin/bash&quot; 37 minutes ago Up 37 minutes 8081/tcp, 8088/tcp, 8765/tcp, 50070/tcp, 60010/tcp, 0.0.0.0:2182-&gt;2181/tcp slave1 cd06942e2c58 mysaber/hadoop:0.2.2 &quot;/bin/bash&quot; 37 minutes ago Up 37 minutes 0.0.0.0:2181-&gt;2181/tcp, 0.0.0.0:8088-&gt;8088/tcp, 0.0.0.0:8765-&gt;8765/tcp, 0.0.0.0:16000-&gt;16000/tcp, 0.0.0.0:16020-&gt;16020/tcp, 0.0.0.0:50070-&gt;50070/tcp, 0.0.0.0:60010-&gt;60010/tcp, 8081/tcp master 查看容器对应的container id $ docker exec -it cd06942e2c58 /bin/bash [root@master /]# 出现以上结果表明正确进入容器内部。 在master容器中，修改hbase配置文件：[root@master /]# vim /opt/hbase/conf/hbase-site.xml 在其中加入下面配置：(在标签&lt;configuration&gt;&lt;/configuration&gt;中，与其他property同级) &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://master:9000&lt;/value&gt; &lt;/property&gt; 在${localPath}新建编辑脚本文件start-all.sh：（或在/opt/docker目录下执行 vim start-all.sh) #!/bin/bash echo &quot;开始启动master。。。&quot; sh /opt/hadoop/sbin/stop-all.sh wait sh /opt/hadoop/bin/hadoop namenode -format wait sh /opt/hadoop/sbin/start-all.sh wait sh /opt/hadoop/bin/hdfs dfsadmin -safemode leave wait sh /opt/zookeeper/bin/zkServer.sh start wait echo &quot;master的hadoop和zookeeper启动完成！&quot; ssh root@slave1 &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooff echo &quot;2&quot; &gt; &quot;/opt/zookeeper/zkdata/myid&quot; cat /opt/zookeeper/zkdata/myid wait sh /opt/zookeeper/bin/zkServer.sh start wait exit eeooff echo &quot;slave1的zookeeper启动完成！&quot; ssh root@slave2 &gt; /dev/null 2&gt;&amp;1 &lt;&lt; eeooffw echo &quot;3&quot; &gt; &quot;/opt/zookeeper/zkdata/myid&quot; cat /opt/zookeeper/zkdata/myid wait sh /opt/zookeeper/bin/zkServer.sh start wait exit eeooffw echo &quot;slave2的zookeeper启动完成！&quot; sh /opt/hbase/bin/start-hbase.sh wait echo &quot;hbase启动完成！&quot; sh /opt/hbase/bin/hbase shell 切换到master容器，执行命令： sh-4.2# cd /opt/docker/ sh-4.2# sh start-all.sh ... ... hbase启动完成！ 2019-10-24 01:13:29,343 WARN [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable HBase Shell Use &quot;help&quot; to get list of supported commands. Use &quot;exit&quot; to quit this interactive shell. Version 2.0.0, r7483b111e4da77adbfc8062b3b22cbe7c2cb91c1, Sun Apr 22 20:26:55 PDT 2018 Took 0.0032 seconds hbase(main):001:0&gt; 出现以上结果，表示hadoop、zookeeper、hbase集群已经启动完成。可以再hbase中进行验证： hbase(main):001:0&gt; list TABLE 0 row(s) Took 0.6531 seconds =&gt; [] hbase(main):002:0&gt; create &#39;user&#39;,&#39;info&#39; Created table user Took 0.9004 seconds =&gt; Hbase::Table - user 成功执行以上两条命令，表明hbase的查询和创建表都是正常的，如果出现问题的话，可以查看/opt/hbase/logs/中对应的log文件抛出的异常来进行排查。 从服务列表中排查是否出错：在master中通过命令查询当前容器启动的服务列表： ## 执行jps命令 sh-4.2# jps 896 SecondaryNameNode————hadoop的secondaryNameNode服务 1507 HMaster————hbase的Hmaster服务 1379 QuorumPeerMain————zookeeper服务 1062 ResourceManager————hadoop的ResourceManager服务 1611 HRegionServer————hbase的HRegionServer服务 652 NameNode————hadoop的NameNode服务 2094 Jps 如果上述6个服务都启动成功，表明master中的服务正常。切换到slave中继续查看 ## 切换到slave1容器，可同理切换到slave2容器 sh-4.2# ssh slave1 Last login: Tue Oct 8 09:22:02 2019 from master ## 执行jps命令 [root@slave1 ~]# jps 480 HRegionServer————hbase的HRegionServer服务 130 DataNode————hadoop的DataNode服务 402 QuorumPeerMain————zookeeper服务 245 NodeManager————hadoop的NodeManager服务 856 Jps slave1和slave2中的服务应该相同，如果出现缺少某服务的情况，可在对应容器中，cd到对应服务的目录下/opt/hadoop|hbase|zookeeper的logs目录中查看对应服务的启动运行日志。 配置Phoenix切换到master容器，进入phoenix目录： [root@slave1 ~]# ssh master Last login: Tue Oct 8 09:22:02 2019 from master [root@master ~]# cd /opt/phoenix/bin/ [root@master bin]# 启动phoenix的queryserver： [root@master bin]# ./queryserver.py start starting Query Server, logging to /tmp/phoenix/phoenix-root-queryserver.log ## 检查queryserver是否已经启动 [root@master bin]# jps 896 SecondaryNameNode 2624 Jps 1507 HMaster 1379 QuorumPeerMain 2596 QueryServer————phoenix的queryserver服务 1062 ResourceManager 1611 HRegionServer 652 NameNode phoenix命令行phoenix也提供了一个类似于MySQL的命令行的工具，在phoenix的bin目录下执行： [root@master bin]# ./sqlline.py Setting property: [incremental, false] Setting property: [isolation, TRANSACTION_READ_COMMITTED] issuing: !connect jdbc:phoenix: none none org.apache.phoenix.jdbc.PhoenixDriver Connecting to jdbc:phoenix: SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/opt/phoenix/phoenix-5.0.0-HBase-2.0-client.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/opt/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. 19/10/24 02:31:53 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable Connected to: Phoenix (version 5.0) Driver: PhoenixEmbeddedDriver (version 5.0) Autocommit status: true Transaction isolation: TRANSACTION_READ_COMMITTED Building list of tables and columns for tab-completion (set fastconnect to true to skip)... 133/133 (100%) Done Done sqlline version 1.2.0 0: jdbc:phoenix:&gt; 出现上述结果表示成功进入phoenix，可以尝试执行创建表格（创建表格注意事项，在下方有提及） 0: jdbc:phoenix:&gt; create table visit_details ( inc_id varchar(32) not null, area_code varchar(32) , area_name varchar(32) , department_code varchar(32) , department_name varchar(32) , visit_type tinyint default 0 , patient_code varchar(32) not null , address varchar(128) , address_split varchar(128) , address_province varchar(32) , address_city varchar(32) , address_district varchar(32) , address_town varchar(32) , address_street varchar(128) , gender tinyint default 0 , age integer , visit_at timestamp , operate_at timestamp , created_at timestamp not null , updated_at timestamp not null CONSTRAINT PK PRIMARY KEY (inc_id, patient_code, created_at, updated_at) ); phoenix的表格默认为全局索引，在本docker镜像中已经配置了对应的耳机索引，可通过下方命令创建索引： 0: jdbc:phoenix:&gt; create index op_index on visit_details(operate_at); No rows affected (5.957 seconds) 通过!table命令查看表格以及索引： 0: jdbc:phoenix:&gt; !table +------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+ | TABLE_CAT | TABLE_SCHEM | TABLE_NAME | TABLE_TYPE | REMARKS | TYPE_NAME | SELF_REFERENCING_COL_NAME | REF_GENERATION | INDEX_STATE | IMMUTABLE_ROWS | SALT_BUCKETS | MULTI_TENANT | VIEW_STATEMENT | VIEW_TYPE | INDEX_TYPE | TRANSACTIONAL | | +------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+ | | | OP_INDEX | INDEX | | | | | ACTIVE | false | null | false | | | GLOBAL | false | | | | SYSTEM | CATALOG | SYSTEM TABLE | | | | | | false | null | false | | | | false | | | | SYSTEM | FUNCTION | SYSTEM TABLE | | | | | | false | null | false | | | | false | | | | SYSTEM | LOG | SYSTEM TABLE | | | | | | true | 32 | false | | | | false | | | | SYSTEM | SEQUENCE | SYSTEM TABLE | | | | | | false | null | false | | | | false | | | | SYSTEM | STATS | SYSTEM TABLE | | | | | | false | null | false | | | | false | | | | | VISIT_DETAILS | TABLE | | | | | | false | null | false | | | | false | | +------------+--------------+----------------+---------------+----------+------------+----------------------------+-----------------+--------------+-----------------+---------------+---------------+-----------------+------------+-------------+----------------+--+ 接下来使用dataX将MySQL数据导入phoenix，接下来使用dataX将MySQL数据导入phoenix，phoenix的使用注意事项，可以查看：使用DATAX将MySQL导入Phoenix","author":"Dizent","categories":[{"name":"大数据","slug":"大数据","permalink":"http://zone.dizent.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://zone.dizent.cn/tags/bigdata/"}]},{"title":"使用DATAX将MySQL导入Phoenix","slug":"Phoenix","date":"16/10/2019","updated":"09/05/2020","comments":true,"path":"2019/10/16/Phoenix/","link":"","permalink":"http://zone.dizent.cn/2019/10/16/Phoenix/","excerpt":"","text":"使用DATAX将MySQL导入Phoenix安装Hadoop、Zookeeper、Hbase 2.X、Phoenix 5.X$ docker pull mysaber/hadoop 0.1.5 配置Phoenix 5.X//复制hbase配置到phoenix $ cp {HBase_Home}/conf/hbase-site.xml {phoenix_home}/bin/ //拷贝phoenix下的把 phoenix-&lt;version&gt;-server.jar、phoenix-core-&lt;version&gt;.jar 拷贝到hbaseServer的lib目录下{Hbase_Home}/lib 下载DataX源码并进行编译$ git clone https://github.com/alibaba/DataX.git 在Phoenix中创建与MySQL相对应的tablePhoenix的数据类型,注意修改MySQL表中数据到对应数据类型，另外not null需要与primary key联合使用 INTEGER UNSIGNED_INT BIGINT UNSIGNED_LONG TINYINT UNSIGNED_TINYINT SMALLINT UNSIGNED_SMALLINT FLOAT UNSIGNED_FLOAT DOUBLE UNSIGNED_DOUBLE DECIMAL BOOLEAN TIME DATE TIMESTAMP UNSIGNED_TIME UNSIGNED_DATE UNSIGNED_TIMESTAMP VARCHAR CHAR BINARY VARBINARY ARRAY 例如驾驶舱中的visit_details可修改为： create table visit_details ( inc_id varchar(32) not null, area_code varchar(32) , area_name varchar(32) , department_code varchar(32) , department_name varchar(32) , visit_type tinyint default 0 , patient_code varchar(32) not null , address varchar(128) , address_split varchar(128) , address_province varchar(32) , address_city varchar(32) , address_district varchar(32) , address_town varchar(32) , address_street varchar(128) , gender tinyint default 0 , age integer , visit_at timestamp , operate_at timestamp , created_at timestamp not null , updated_at timestamp not null CONSTRAINT PK PRIMARY KEY (inc_id, patient_code, created_at, updated_at) ); 插入语句示例： UPSERT INTO visit_details(inc_id, area_code, area_name, department_code, department_name, visit_type, patient_code, address, address_split, address_province, address_city, address_district, address_town, address_street, gender, age, visit_at, operate_at, created_at, updated_at) VALUES (&#39;0000011ccc654b518edbce2b3e58afa2&#39;, &#39;9&#39;, &#39;江南分院&#39;, &#39;0204&#39;, &#39;江南急诊科&#39;, 1, &#39;1000003834429&#39;, &#39;重庆市万州区石峰路999号&#39;, &#39;重庆市-万州区-石峰路999号&#39;, &#39;重庆市&#39;, NULL, &#39;万州区&#39;, NULL, &#39;石峰路999号&#39;, 1, 3, &#39;2019-02-10 22:43:11&#39;, &#39;2019-02-10 20:29:19&#39;, &#39;2019-08-01 00:39:43&#39;, &#39;2019-08-01 00:39:43&#39;); Datax源码编译（源码plugins太多，可以将主目录下pom.xml文件中的不需要的module注释掉） $ cd {DataX_source_code_home} $ mvn -U clean package assembly:assembly -Dmaven.test.skip=true 在编译的目录下，进入target目录，可以找到编译后的datax。 Phoenix开启QueryServer;服务器需要开启8765端口，docker则需要开放并映射8765端口 $ cd {Phoenix_Home}/bin $ ./queryServer.py start 编辑DataX的Job文件： 新建一个json文件：mysql2phoenix.json { job:{ &quot;content&quot;:[ { &quot;reader&quot;:$Reader_Object, &quot;writer&quot;:$Writer_Object } ], &quot;setting&quot;:{ &quot;speed&quot;:{ &quot;byte&quot;:1048576, //同时开启的进程数 &quot;channel&quot;:16, //分片的记录条数 &quot;record&quot;:10000 } } } } Reader Object { //name为datax的plugin目录下的插件名 &quot;name&quot;:&quot;mysqlreader&quot;, //paramter为插件所需要的参数，各插件各不相同 &quot;parameter&quot;:{ &quot;connection&quot;:[ { //mysql连接地址，可配多个 &quot;jdbcUrl&quot;:[ &quot;jdbc:mysql://localhost:3306/odc_v2&quot; ], //mysql查询SQL语句，列名顺序和列数需要和writer中的相同 &quot;querySql&quot;:[ &quot;select * from visit_details;&quot; ] } ], &quot;password&quot;:&quot;******&quot;, &quot;username&quot;:&quot;root&quot; } Writer_Object { //write的插件名 &quot;name&quot;:&quot;hbase20xsqlwriter&quot;, &quot;parameter&quot;:{ //单次提交的条数 &quot;batchSize&quot;:&quot;100&quot;, &quot;column&quot;:[ &quot;INC_ID&quot;, &quot;AREA_CODE&quot;, &quot;AREA_NAME&quot;, &quot;DEPARTMENT_CODE&quot;, &quot;DEPARTMENT_NAME&quot;, &quot;VISIT_TYPE&quot;, &quot;PATIENT_CODE&quot;, &quot;ADDRESS&quot;, &quot;ADDRESS_SPLIT&quot;, &quot;ADDRESS_PROVINCE&quot;, &quot;ADDRESS_CITY&quot;, &quot;ADDRESS_DISTRICT&quot;, &quot;ADDRESS_TOWN&quot;, &quot;ADDRESS_STREET&quot;, &quot;GENDER&quot;, &quot;AGE&quot;, &quot;VISIT_AT&quot;, &quot;OPERATE_AT&quot;, &quot;CREATED_AT&quot;, &quot;UPDATED_AT&quot; ], //空值处理策略，有skip和set null &quot;nullMode&quot;:&quot;skip&quot;, //服务地址 &quot;queryServerAddress&quot;:&quot;http://server-Ip:8765&quot;, //写入表 &quot;table&quot;:&quot;VISIT_DETAILS&quot; } } 运行DataX$ cd {DataX_Home}/bin $ python datax.py {Your_Job_Path}/mysql2phoenix.json","author":"Dizent","categories":[{"name":"中间件","slug":"中间件","permalink":"http://zone.dizent.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://zone.dizent.cn/tags/bigdata/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"12/12/2018","updated":"30/04/2020","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"http://zone.dizent.cn/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","author":"hojun","categories":[{"name":"技术","slug":"技术","permalink":"http://zone.dizent.cn/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"http://zone.dizent.cn/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"http://zone.dizent.cn/tags/%E6%82%A6%E8%AF%BB/"}]}],"categories":[{"name":"Flink","slug":"Flink","permalink":"http://zone.dizent.cn/categories/Flink/"},{"name":"大数据","slug":"大数据","permalink":"http://zone.dizent.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"技术","slug":"技术","permalink":"http://zone.dizent.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"中间件","slug":"中间件","permalink":"http://zone.dizent.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}],"tags":[{"name":"bigdata","slug":"bigdata","permalink":"http://zone.dizent.cn/tags/bigdata/"},{"name":"Java","slug":"Java","permalink":"http://zone.dizent.cn/tags/Java/"},{"name":"网络","slug":"网络","permalink":"http://zone.dizent.cn/tags/%E7%BD%91%E7%BB%9C/"},{"name":"ngrok","slug":"ngrok","permalink":"http://zone.dizent.cn/tags/ngrok/"},{"name":"服务器","slug":"服务器","permalink":"http://zone.dizent.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"web","slug":"web","permalink":"http://zone.dizent.cn/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"http://zone.dizent.cn/tags/%E6%82%A6%E8%AF%BB/"}]}